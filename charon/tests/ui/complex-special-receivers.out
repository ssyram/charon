# Final LLBC before serialization:

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::panicking::AssertKind
pub enum AssertKind {
  Eq,
  Ne,
  Match,
}

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::boxed::{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop
pub fn {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop<'_0, T, A>(@1: &'_0 mut (alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]))
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: alloc::boxed::{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}
impl<T, A> Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,
{
    parent_clause0 = MetaSized<alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]>
    fn drop<'_0> = {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop<'_0_0, T, A>[@TraitClause0, @TraitClause1]
    vtable: {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::{vtable}<T, A>[@TraitClause0, @TraitClause1]
}

struct test_crate::Simple::{vtable} {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)),
  method_value: fn<'_0>(&'_0_0 ((dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_))) -> i32,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
}

// Full name: test_crate::Simple
trait Simple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn value<'_0> = test_crate::Simple::value<'_0_0, Self>[Self]
    vtable: test_crate::Simple::{vtable}
}

fn test_crate::Simple::value<'_0, Self>(@1: &'_0 (Self)) -> i32
where
    [@TraitClause0]: Simple<Self>,

// Full name: test_crate::{impl Simple for i32}::value
fn {impl Simple for i32}::value<'_0>(@1: &'_0 (i32)) -> i32
{
    let @0: i32; // return
    let self@1: &'_ (i32); // arg #1

    @0 := copy (*(self@1))
    return
}

// Full name: test_crate::{impl Simple for i32}::value
fn {impl Simple for i32}::value<'_0>(@1: &'_0 ((dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_))) -> i32
{
    let @0: i32; // return
    let @1: &'_0 (i32); // arg #1
    let @2: &'_0 (i32); // anonymous local

    storage_live(@0)
    storage_live(@1)
    storage_live(@2)
    @2 := concretize<&'_0 (i32), &'_0 (i32)>(move (@1))
    @0 := {impl Simple for i32}::value<'_0>(move (@2))
    return
}

// Full name: test_crate::{impl Simple for i32}::{vtable}
fn {impl Simple for i32}::{vtable}() -> test_crate::Simple::{vtable}
{
    let ret@0: test_crate::Simple::{vtable}; // return

    ret@0 := test_crate::Simple::{vtable} { size: const (Opaque(unknown size)), align: const (Opaque(unknown align)), drop: const (Opaque(unknown drop)), method_value: const ({impl Simple for i32}::value), super_trait_0: const (Opaque(missing supertrait vtable)) }
    return
}

// Full name: test_crate::{impl Simple for i32}::{vtable}
static {impl Simple for i32}::{vtable}: test_crate::Simple::{vtable} = {impl Simple for i32}::{vtable}()

// Full name: test_crate::{impl Simple for i32}
impl Simple for i32 {
    parent_clause0 = MetaSized<i32>
    fn value<'_0> = {impl Simple for i32}::value<'_0_0>
    vtable: {impl Simple for i32}::{vtable}
}

// Full name: test_crate::test_box_dyn_trait
fn test_box_dyn_trait()
{
    let @0: (); // return
    let val@1: alloc::boxed::Box<i32>[MetaSized<i32>, Sized<Global>]; // local
    let trait_obj@2: alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]; // local
    let @3: alloc::boxed::Box<i32>[MetaSized<i32>, Sized<Global>]; // anonymous local
    let result@4: i32; // local
    let @5: &'_ ((dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)); // anonymous local
    let @6: (); // anonymous local
    let @7: (&'_ (i32), &'_ (i32)); // anonymous local
    let @8: &'_ (i32); // anonymous local
    let @9: &'_ (i32); // anonymous local
    let @10: i32; // anonymous local
    let left_val@11: &'_ (i32); // local
    let right_val@12: &'_ (i32); // local
    let @13: bool; // anonymous local
    let @14: i32; // anonymous local
    let @15: i32; // anonymous local
    let kind@16: AssertKind; // local
    let @17: AssertKind; // anonymous local
    let @18: &'_ (i32); // anonymous local
    let @19: &'_ (i32); // anonymous local
    let @20: &'_ (i32); // anonymous local
    let @21: &'_ (i32); // anonymous local
    let @22: Option<Arguments<'_>>[Sized<Arguments<'_>>]; // anonymous local

    storage_live(kind@16)
    storage_live(@17)
    storage_live(@18)
    storage_live(@19)
    storage_live(@20)
    storage_live(@21)
    storage_live(@22)
    storage_live(val@1)
    // Test Box<dyn Trait> without Pin
    val@1 := @BoxNew<i32>[Sized<i32>](const (200 : i32))
    storage_live(trait_obj@2)
    storage_live(@3)
    @3 := move (val@1)
    trait_obj@2 := unsize_cast<alloc::boxed::Box<i32>[MetaSized<i32>, Sized<Global>], alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>], {impl Simple for i32}>(move (@3))
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<i32, Global>[MetaSized<i32>, Sized<Global>]] @3
    storage_dead(@3)
    storage_live(result@4)
    storage_live(@5)
    // Call method through the smart pointer
    @5 := &*(trait_obj@2)
    result@4 := Simple<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>::value<'_>(move (@5))
    storage_dead(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := &result@4
    storage_live(@9)
    storage_live(@10)
    @10 := const (200 : i32)
    @9 := &@10
    @7 := (move (@8), move (@9))
    storage_dead(@9)
    storage_dead(@8)
    storage_live(left_val@11)
    left_val@11 := copy ((@7).0)
    storage_live(right_val@12)
    right_val@12 := copy ((@7).1)
    storage_live(@13)
    storage_live(@14)
    @14 := copy (*(left_val@11))
    storage_live(@15)
    @15 := copy (*(right_val@12))
    @13 := move (@14) == move (@15)
    if move (@13) {
    }
    else {
        storage_dead(@15)
        storage_dead(@14)
        storage_live(kind@16)
        kind@16 := AssertKind::Eq {  }
        storage_live(@17)
        @17 := move (kind@16)
        storage_live(@18)
        storage_live(@19)
        @19 := &*(left_val@11)
        @18 := &*(@19)
        storage_live(@20)
        storage_live(@21)
        @21 := &*(right_val@12)
        @20 := &*(@21)
        storage_live(@22)
        @22 := Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@15)
    storage_dead(@14)
    storage_dead(@13)
    storage_dead(right_val@12)
    storage_dead(left_val@11)
    storage_dead(@10)
    storage_dead(@7)
    storage_dead(@6)
    @0 := ()
    storage_dead(result@4)
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]] trait_obj@2
    storage_dead(trait_obj@2)
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<i32, Global>[MetaSized<i32>, Sized<Global>]] val@1
    storage_dead(val@1)
    @0 := ()
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local

    storage_live(@1)
    @1 := test_box_dyn_trait()
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



