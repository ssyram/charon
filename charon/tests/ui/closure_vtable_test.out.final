{"charon_version":"0.1.124","translated":{"crate_name":"closure_vtable_test","options":{"ullbc":false,"lib":false,"bin":null,"mir_promoted":false,"mir_optimized":false,"mir":null,"input_file":"./tests/ui/closure_vtable_test.rs","read_llbc":null,"dest_dir":null,"dest_file":"./tests/ui/closure_vtable_test.out.final","use_polonius":false,"skip_borrowck":false,"monomorphize":false,"monomorphize_conservative":false,"extract_opaque_bodies":false,"translate_all_methods":false,"include":[],"opaque":[],"exclude":[],"remove_associated_types":[],"hide_marker_traits":false,"hide_allocator":false,"remove_unused_self_clauses":false,"add_drop_bounds":false,"start_from":[],"no_cargo":false,"rustc_args":[],"cargo_args":[],"abort_on_error":false,"error_on_warnings":false,"no_serialize":false,"print_original_ullbc":false,"print_ullbc":false,"print_built_llbc":false,"print_llbc":false,"no_merge_goto_chains":false,"no_ops_to_function_calls":false,"raw_boxes":false,"preset":null},"target_information":{"target_pointer_size":8,"is_little_endian":true},"item_names":[{"key":{"Global":1},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":1}},{"Ident":["{vtable}",0]}]},{"key":{"TraitDecl":5},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Tuple",0]}]},{"key":{"Type":5},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]},{"Ident":["{vtable}",0]}]},{"key":{"Fun":2},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":0}},{"Ident":["call",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]}]},{"key":{"TraitImpl":2},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":2}}]},{"key":{"Type":1},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Ident":["closure",0]}]},{"key":{"TraitDecl":3},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["MetaSized",0]}]},{"key":{"Fun":5},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]},{"Ident":["call_mut",0]}]},{"key":{"Type":0},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["Fn",0]},{"Ident":["{vtable}",0]}]},{"key":{"TraitImpl":1},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":1}}]},{"key":{"TraitDecl":1},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]}]},{"key":{"TraitDecl":6},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["drop",0]},{"Ident":["Drop",0]}]},{"key":{"Fun":0},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]}]},{"key":{"Fun":3},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":1}},{"Ident":["call_mut",0]}]},{"key":{"Global":2},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":2}},{"Ident":["{vtable}",0]}]},{"key":{"Type":2},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["drop",0]},{"Ident":["Drop",0]},{"Ident":["{vtable}",0]}]},{"key":{"TraitImpl":0},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":0}}]},{"key":{"Fun":4},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":2}},{"Ident":["call_once",0]}]},{"key":{"Type":3},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["MetaSized",0]},{"Ident":["{vtable}",0]}]},{"key":{"Global":0},"value":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":0}},{"Ident":["{vtable}",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["Fn",0]}]},{"key":{"Fun":1},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["Fn",0]},{"Ident":["call",0]}]},{"key":{"TraitDecl":4},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}]},{"key":{"Fun":6},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["drop",0]},{"Ident":["Drop",0]},{"Ident":["drop",0]}]},{"key":{"Type":4},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]},{"Ident":["{vtable}",0]}]},{"key":{"Fun":7},"value":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]},{"Ident":["call_once",0]}]},{"key":{"Type":6},"value":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Tuple",0]},{"Ident":["{vtable}",0]}]}],"short_names":[{"key":{"Fun":4},"value":[{"Impl":{"Trait":2}},{"Ident":["call_once",0]}]},{"key":{"TraitDecl":0},"value":[{"Ident":["Fn",0]}]},{"key":{"TraitDecl":6},"value":[{"Ident":["Drop",0]}]},{"key":{"Fun":3},"value":[{"Impl":{"Trait":1}},{"Ident":["call_mut",0]}]},{"key":{"TraitDecl":5},"value":[{"Ident":["Tuple",0]}]},{"key":{"TraitImpl":2},"value":[{"Impl":{"Trait":2}}]},{"key":{"Global":0},"value":[{"Impl":{"Trait":0}},{"Ident":["{vtable}",0]}]},{"key":{"TraitImpl":0},"value":[{"Impl":{"Trait":0}}]},{"key":{"TraitDecl":1},"value":[{"Ident":["FnOnce",0]}]},{"key":{"Fun":0},"value":[{"Ident":["main",0]}]},{"key":{"Fun":2},"value":[{"Impl":{"Trait":0}},{"Ident":["call",0]}]},{"key":{"TraitImpl":1},"value":[{"Impl":{"Trait":1}}]},{"key":{"Global":2},"value":[{"Impl":{"Trait":2}},{"Ident":["{vtable}",0]}]},{"key":{"Type":1},"value":[{"Ident":["closure",0]}]},{"key":{"TraitDecl":4},"value":[{"Ident":["Sized",0]}]},{"key":{"TraitDecl":2},"value":[{"Ident":["FnMut",0]}]},{"key":{"Global":1},"value":[{"Impl":{"Trait":1}},{"Ident":["{vtable}",0]}]},{"key":{"TraitDecl":3},"value":[{"Ident":["MetaSized",0]}]},{"key":{"Fun":6},"value":[{"Ident":["drop",0]}]}],"files":[{"name":{"Local":"./tests/ui/closure_vtable_test.rs"},"crate_name":"closure_vtable_test","contents":"fn main() {\n  let y = 10;\n  let f: &dyn Fn(i32) -> i32 = &|x| x + y;\n  assert!(f(0) > 0);\n}"},{"name":{"Local":"/rustc/library/core/src/ops/function.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/mod.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/lib.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/panicking.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/marker.rs"},"crate_name":"core","contents":null},{"name":{"Local":"/rustc/library/core/src/ops/drop.rs"},"crate_name":"core","contents":null}],"type_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["Fn",0]},{"Ident":["{vtable}",0]}],"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":false,"opacity":"Foreign","lang_item":null},"generics":{"regions":[],"types":[{"index":0,"name":"Args"},{"index":1,"name":"Ty0"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":{"VTableTy":{"dyn_predicate":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}}},"kind":{"Struct":[{"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":"size","ty":{"Literal":{"UInt":"Usize"}}},{"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":"align","ty":{"Literal":{"UInt":"Usize"}}},{"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":"drop","ty":{"FnPtr":{"regions":[],"skip_binder":[[{"RawPtr":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Mut"]}],{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}]}}},{"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":"method_call","ty":{"FnPtr":{"regions":[{"index":0,"name":null}],"skip_binder":[[{"Ref":[{"Var":{"Bound":[0,0]}},{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]},{"TypeVar":{"Free":0}}],{"TraitType":[{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":"Dyn","trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}]}}},{"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":"super_trait_0","ty":{"Ref":["Static",{"Adt":{"id":{"Adt":3},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":true},"name":"super_trait_1","ty":{"Ref":["Static",{"Adt":{"id":{"Adt":4},"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TraitType":[{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":"Dyn","trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"TypeVar":{"Free":1}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}],"const_generics":[],"trait_refs":[]}}},"Shared"]}}]},"layout":{"size":48,"align":48,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[0,8,16,24,32,40],"uninhabited":false,"tag":null}]},"ptr_metadata":null},{"def_id":1,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Ident":["closure",0]}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"source_text":"|x| x + y","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"src":{"Closure":{"info":{"kind":"Fn","fn_once_impl":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"fn_mut_impl":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"fn_impl":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"signature":{"regions":[],"skip_binder":[[{"Literal":{"Int":"I32"}}],{"Literal":{"Int":"I32"}}]}}}},"kind":{"Struct":[{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"name":null,"ty":{"Ref":[{"Var":{"Free":0}},{"Literal":{"Int":"I32"}},"Shared"]}}]},"layout":{"size":8,"align":8,"discriminant_layout":null,"uninhabited":false,"variant_layouts":[{"field_offsets":[0],"uninhabited":false,"tag":null}]},"ptr_metadata":"None"},null,null,null,null,null],"fun_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]}],"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"source_text":"fn main() {\n  let y = 10;\n  let f: &dyn Fn(i32) -> i32 = &|x| x + y;\n  assert!(f(0) > 0);\n}","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":"TopLevel","is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"locals":{"arg_count":0,"locals":[{"index":0,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":1,"name":"y","ty":{"Literal":{"Int":"I32"}}},{"index":2,"name":"f","ty":{"Ref":["Erased",{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]}},{"index":3,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":4,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":5,"name":null,"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":6,"name":null,"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},{"index":7,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":8,"name":null,"ty":{"Literal":"Bool"}},{"index":9,"name":null,"ty":{"Literal":{"Int":"I32"}}},{"index":10,"name":null,"ty":{"Ref":["Erased",{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]}},{"index":11,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":1,"col":10},"end":{"line":5,"col":1}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":2,"col":6},"end":{"line":2,"col":7}},"generated_from_span":null},"id":21,"content":{"StorageLive":1},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":2,"col":10},"end":{"line":2,"col":12}},"generated_from_span":null},"id":22,"content":{"Assign":[{"kind":{"Local":1},"ty":{"Literal":{"Int":"I32"}}},{"Use":{"Const":{"value":{"Literal":{"Scalar":{"Signed":["I32","10"]}}},"ty":{"Literal":{"Int":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":6},"end":{"line":3,"col":7}},"generated_from_span":null},"id":23,"content":{"StorageLive":2},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":31},"end":{"line":3,"col":41}},"generated_from_span":null},"id":24,"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":31},"end":{"line":3,"col":41}},"generated_from_span":null},"id":25,"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":26,"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":27,"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":28,"content":{"Assign":[{"kind":{"Local":6},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},{"Ref":[{"kind":{"Local":1},"ty":{"Literal":{"Int":"I32"}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":29,"content":{"Assign":[{"kind":{"Local":5},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[{"Move":{"kind":{"Local":6},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":34},"end":{"line":3,"col":35}},"generated_from_span":null},"id":30,"content":{"StorageDead":6},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":31},"end":{"line":3,"col":41}},"generated_from_span":null},"id":31,"content":{"Assign":[{"kind":{"Local":4},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Local":5},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":31},"end":{"line":3,"col":41}},"generated_from_span":null},"id":32,"content":{"Assign":[{"kind":{"Local":3},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":4},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":31},"end":{"line":3,"col":41}},"generated_from_span":null},"id":33,"content":{"Assign":[{"kind":{"Local":2},"ty":{"Ref":["Erased",{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]}},{"UnaryOp":[{"Cast":{"Unsize":[{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]},{"Ref":["Erased",{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]},{"VTablePtr":{"kind":{"TraitImpl":{"id":0,"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}}]}},{"Move":{"kind":{"Local":3},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":40},"end":{"line":3,"col":41}},"generated_from_span":null},"id":34,"content":{"StorageDead":3},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":41},"end":{"line":3,"col":42}},"generated_from_span":null},"id":35,"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":2},"end":{"line":4,"col":19}},"generated_from_span":null},"id":36,"content":{"StorageLive":7},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":18}},"generated_from_span":null},"id":37,"content":{"StorageLive":8},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":14}},"generated_from_span":null},"id":38,"content":{"StorageLive":9},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":11}},"generated_from_span":null},"id":39,"content":{"StorageLive":10},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":11}},"generated_from_span":null},"id":40,"content":{"Assign":[{"kind":{"Local":10},"ty":{"Ref":["Erased",{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":2},"ty":{"Ref":["Erased",{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]}},"Deref"]},"ty":{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":14}},"generated_from_span":null},"id":41,"content":{"StorageLive":11},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":14}},"generated_from_span":null},"id":42,"content":{"Assign":[{"kind":{"Local":11},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[{"Const":{"value":{"Literal":{"Scalar":{"Signed":["I32","0"]}}},"ty":{"Literal":{"Int":"I32"}}}}]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":14}},"generated_from_span":null},"id":20,"content":{"Call":{"func":{"Regular":{"func":{"Trait":[{"kind":"Dyn","trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"call",1]},"generics":{"regions":["Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":10},"ty":{"Ref":["Erased",{"DynTrait":{"binder":{"params":{"regions":[],"types":[{"index":0,"name":"_dyn"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"Dyn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[1,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[{"regions":[],"skip_binder":[{"TypeVar":{"Bound":[1,0]}},"Erased"]}],"trait_type_constraints":[{"regions":[],"skip_binder":{"trait_ref":{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Bound":[1,0]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Bound":[2,0]}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},"type_name":"Output","ty":{"Literal":{"Int":"I32"}}}}]},"skip_binder":{"TypeVar":{"Bound":[0,0]}},"kind":"Dyn"}}},"Shared"]}}},{"Move":{"kind":{"Local":11},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}}}],"dest":{"kind":{"Local":9},"ty":{"Literal":{"Int":"I32"}}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":14}},"generated_from_span":null},"id":5,"content":{"StorageDead":11},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":13},"end":{"line":4,"col":14}},"generated_from_span":null},"id":6,"content":{"StorageDead":10},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":18}},"generated_from_span":null},"id":7,"content":{"Assign":[{"kind":{"Local":8},"ty":{"Literal":"Bool"}},{"BinaryOp":["Gt",{"Move":{"kind":{"Local":9},"ty":{"Literal":{"Int":"I32"}}}},{"Const":{"value":{"Literal":{"Scalar":{"Signed":["I32","0"]}}},"ty":{"Literal":{"Int":"I32"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":2},"end":{"line":4,"col":19}},"generated_from_span":null},"id":4,"content":{"Switch":{"If":[{"Move":{"kind":{"Local":8},"ty":{"Literal":"Bool"}}},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":10},"end":{"line":4,"col":18}},"generated_from_span":null},"statements":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":2},"end":{"line":4,"col":19}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":4,"col":17},"end":{"line":4,"col":18}},"generated_from_span":null},"id":2,"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":2},"end":{"line":4,"col":19}},"generated_from_span":null},"id":1,"content":{"Abort":{"Panic":[{"Ident":["core",0]},{"Ident":["panicking",0]},{"Ident":["panic",0]}]}},"comments_before":[]}]}]}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":17},"end":{"line":4,"col":18}},"generated_from_span":null},"id":9,"content":{"StorageDead":9},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":18},"end":{"line":4,"col":19}},"generated_from_span":null},"id":12,"content":{"StorageDead":8},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":4,"col":18},"end":{"line":4,"col":19}},"generated_from_span":null},"id":13,"content":{"StorageDead":7},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":1,"col":10},"end":{"line":5,"col":1}},"generated_from_span":null},"id":15,"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"id":16,"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"id":17,"content":{"StorageDead":2},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":0},"end":{"line":5,"col":1}},"generated_from_span":null},"id":18,"content":{"StorageDead":1},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":1},"end":{"line":5,"col":1}},"generated_from_span":null},"id":19,"content":{"Assign":[{"kind":{"Local":0},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Aggregate":[{"Adt":[{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}},null,null]},[]]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":5,"col":1},"end":{"line":5,"col":1}},"generated_from_span":null},"id":8,"content":"Return","comments_before":[]}]}}}}},{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["Fn",0]},{"Ident":["call",0]}],"span":{"span":{"file_id":1,"beg":{"line":79,"col":4},"end":{"line":79,"col":66}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Performs the call operation."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Shared"]},{"TypeVar":{"Free":1}}],"output":{"TraitType":[{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Free":0}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}},"kind":{"TraitDecl":{"trait_ref":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"call","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":2,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":0}},{"Ident":["call",0]}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"source_text":"|x| x + y","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"output":{"Literal":{"Int":"I32"}}},"kind":{"TraitImpl":{"impl_ref":{"id":0,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":0,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"item_name":"call","reuses_default":false}},"is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"locals":{"arg_count":2,"locals":[{"index":0,"name":null,"ty":{"Literal":{"Int":"I32"}}},{"index":1,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"index":2,"name":"tupled_args","ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}},{"index":3,"name":"x","ty":{"Literal":{"Int":"I32"}}},{"index":4,"name":null,"ty":{"Literal":{"Int":"I32"}}},{"index":5,"name":null,"ty":{"Literal":{"Int":"I32"}}},{"index":6,"name":null,"ty":{"Literal":{"Int":"I32"}}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":61,"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":62,"content":{"StorageLive":6},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":44,"content":{"Assign":[{"kind":{"Local":3},"ty":{"Literal":{"Int":"I32"}}},{"Use":{"Move":{"kind":{"Projection":[{"kind":{"Local":2},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Tuple":1},0]}]},"ty":{"Literal":{"Int":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":36},"end":{"line":3,"col":37}},"generated_from_span":null},"id":45,"content":{"StorageLive":4},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":36},"end":{"line":3,"col":37}},"generated_from_span":null},"id":46,"content":{"Assign":[{"kind":{"Local":4},"ty":{"Literal":{"Int":"I32"}}},{"Use":{"Copy":{"kind":{"Local":3},"ty":{"Literal":{"Int":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":40},"end":{"line":3,"col":41}},"generated_from_span":null},"id":47,"content":{"StorageLive":5},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":40},"end":{"line":3,"col":41}},"generated_from_span":null},"id":48,"content":{"Assign":[{"kind":{"Local":5},"ty":{"Literal":{"Int":"I32"}}},{"Use":{"Copy":{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}},{"Field":[{"Adt":[1,null]},0]}]},"ty":{"Ref":["Erased",{"Literal":{"Int":"I32"}},"Shared"]}},"Deref"]},"ty":{"Literal":{"Int":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":36},"end":{"line":3,"col":41}},"generated_from_span":null},"id":49,"content":{"Assign":[{"kind":{"Local":6},"ty":{"Literal":{"Int":"I32"}}},{"BinaryOp":[{"Add":"Panic"},{"Copy":{"kind":{"Local":4},"ty":{"Literal":{"Int":"I32"}}}},{"Copy":{"kind":{"Local":5},"ty":{"Literal":{"Int":"I32"}}}}]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":36},"end":{"line":3,"col":41}},"generated_from_span":null},"id":51,"content":{"Assign":[{"kind":{"Local":0},"ty":{"Literal":{"Int":"I32"}}},{"Use":{"Move":{"kind":{"Local":6},"ty":{"Literal":{"Int":"I32"}}}}}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":40},"end":{"line":3,"col":41}},"generated_from_span":null},"id":52,"content":{"StorageDead":5},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":40},"end":{"line":3,"col":41}},"generated_from_span":null},"id":53,"content":{"StorageDead":4},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":41},"end":{"line":3,"col":41}},"generated_from_span":null},"id":43,"content":"Return","comments_before":[]}]}}}}},{"def_id":3,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":1}},{"Ident":["call_mut",0]}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"source_text":"|x| x + y","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null},{"index":1,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"output":{"Literal":{"Int":"I32"}}},"kind":{"TraitImpl":{"impl_ref":{"id":1,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":2,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"item_name":"call_mut","reuses_default":false}},"is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"locals":{"arg_count":2,"locals":[{"index":0,"name":null,"ty":{"Literal":{"Int":"I32"}}},{"index":1,"name":"state","ty":{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},{"index":2,"name":"args","ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}},{"index":3,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}}]},"comments":[],"body":{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":63,"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":56,"content":{"Assign":[{"kind":{"Local":3},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}},{"Ref":[{"kind":{"Projection":[{"kind":{"Local":1},"ty":{"Ref":[{"Var":{"Free":1}},{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},"Deref"]},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}},"Shared"]}]},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":55,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":2}},"generics":{"regions":[{"Var":{"Free":0}},"Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":3},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Shared"]}}},{"Move":{"kind":{"Local":2},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}}}],"dest":{"kind":{"Local":0},"ty":{"Literal":{"Int":"I32"}}}}},"comments_before":[]},{"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"id":54,"content":"Return","comments_before":[]}]}}}}},{"def_id":4,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":2}},{"Ident":["call_once",0]}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"source_text":"|x| x + y","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"output":{"Literal":{"Int":"I32"}}},"kind":{"TraitImpl":{"impl_ref":{"id":2,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}},"trait_ref":{"id":1,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"item_name":"call_once","reuses_default":false}},"is_global_initializer":null,"body":{"Ok":{"Structured":{"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"locals":{"arg_count":2,"locals":[{"index":0,"name":null,"ty":{"Literal":{"Int":"I32"}}},{"index":1,"name":null,"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}},{"index":2,"name":null,"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}},{"index":3,"name":null,"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}}]},"comments":[],"body":{"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"statements":[{"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"id":64,"content":{"StorageLive":3},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"id":60,"content":{"Assign":[{"kind":{"Local":3},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}},{"Ref":[{"kind":{"Local":1},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}},"Mut"]}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"id":59,"content":{"Call":{"func":{"Regular":{"func":{"Fun":{"Regular":3}},"generics":{"regions":[{"Var":{"Free":0}},"Erased"],"types":[],"const_generics":[],"trait_refs":[]}}},"args":[{"Move":{"kind":{"Local":3},"ty":{"Ref":["Erased",{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"Mut"]}}},{"Move":{"kind":{"Local":2},"ty":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}}}],"dest":{"kind":{"Local":0},"ty":{"Literal":{"Int":"I32"}}}}},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"id":58,"content":{"Drop":[{"kind":{"Local":1},"ty":{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}]},"comments_before":[]},{"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"id":57,"content":"Return","comments_before":[]}]}}}}},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]},{"Ident":["call_mut",0]}],"span":{"span":{"file_id":1,"beg":{"line":166,"col":4},"end":{"line":166,"col":74}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Performs the call operation."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]},{"TypeVar":{"Free":1}}],"output":{"TraitType":[{"kind":{"ParentClause":[{"kind":{"Clause":{"Free":0}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}},"kind":{"TraitDecl":{"trait_ref":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"call_mut","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["drop",0]},{"Ident":["Drop",0]},{"Ident":["drop",0]}],"span":{"span":{"file_id":6,"beg":{"line":241,"col":4},"end":{"line":241,"col":23}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Executes the destructor for this type."},{"DocComment":""},{"DocComment":" This method is called implicitly when the value goes out of scope,"},{"DocComment":" and cannot be called explicitly (this is compiler error [E0040])."},{"DocComment":" However, the [`mem::drop`] function in the prelude can be"},{"DocComment":" used to call the argument's `Drop` implementation."},{"DocComment":""},{"DocComment":" When this method has been called, `self` has not yet been deallocated."},{"DocComment":" That only happens after the method is over."},{"DocComment":" If this wasn't the case, `self` would be a dangling reference."},{"DocComment":""},{"DocComment":" # Panics"},{"DocComment":""},{"DocComment":" Implementations should generally avoid [`panic!`]ing, because `drop()` may itself be called"},{"DocComment":" during unwinding due to a panic, and if the `drop()` panics in that situation (a “double"},{"DocComment":" panic”), this will likely abort the program. It is possible to check [`panicking()`] first,"},{"DocComment":" which may be desirable for a `Drop` implementation that is reporting a bug of the kind"},{"DocComment":" “you didn't finish using this before it was dropped”; but most types should simply clean up"},{"DocComment":" their owned allocations or other resources and return normally from `drop()`, regardless of"},{"DocComment":" what state they are in."},{"DocComment":""},{"DocComment":" Note that even if this panics, the value is considered to be dropped;"},{"DocComment":" you must not cause `drop` to be called again. This is normally automatically"},{"DocComment":" handled by the compiler, but when using unsafe code, can sometimes occur"},{"DocComment":" unintentionally, particularly when using [`ptr::drop_in_place`]."},{"DocComment":""},{"DocComment":" [E0040]: ../../error_codes/E0040.html"},{"DocComment":" [`panic!`]: crate::panic!"},{"DocComment":" [`panicking()`]: ../../std/thread/fn.panicking.html"},{"DocComment":" [`mem::drop`]: drop"},{"DocComment":" [`ptr::drop_in_place`]: crate::ptr::drop_in_place"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[{"index":0,"name":null}],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"Ref":[{"Var":{"Free":0}},{"TypeVar":{"Free":0}},"Mut"]}],"output":{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}},"kind":{"TraitDecl":{"trait_ref":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}},"item_name":"drop","has_default":false}},"is_global_initializer":null,"body":{"Err":null}},{"def_id":7,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]},{"Ident":["call_once",0]}],"span":{"span":{"file_id":1,"beg":{"line":250,"col":4},"end":{"line":250,"col":70}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Performs the call operation."}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":null},"signature":{"is_unsafe":false,"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"}],"const_generics":[],"trait_clauses":[{"clause_id":0,"span":{"span":{"file_id":0,"beg":{"line":1,"col":0},"end":{"line":1,"col":0}},"generated_from_span":null},"origin":"WhereClauseOnFn","trait_":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"inputs":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"output":{"TraitType":[{"kind":{"Clause":{"Free":0}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}},"kind":{"TraitDecl":{"trait_ref":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}},"item_name":"call_once","has_default":false}},"is_global_initializer":null,"body":{"Err":null}}],"global_decls":[null,null,null],"trait_decls":[{"def_id":0,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["Fn",0]}],"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":76,"col":38}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The version of the call operator that takes an immutable receiver."},{"DocComment":""},{"DocComment":" Instances of `Fn` can be called repeatedly without mutating state."},{"DocComment":""},{"DocComment":" *This trait (`Fn`) is not to be confused with [function pointers]"},{"DocComment":" (`fn`).*"},{"DocComment":""},{"DocComment":" `Fn` is implemented automatically by closures which only take immutable"},{"DocComment":" references to captured variables or don't capture anything at all, as well"},{"DocComment":" as (safe) [function pointers] (with some caveats, see their documentation"},{"DocComment":" for more details). Additionally, for any type `F` that implements `Fn`, `&F`"},{"DocComment":" implements `Fn`, too."},{"DocComment":""},{"DocComment":" Since both [`FnMut`] and [`FnOnce`] are supertraits of `Fn`, any"},{"DocComment":" instance of `Fn` can be used as a parameter where a [`FnMut`] or [`FnOnce`]"},{"DocComment":" is expected."},{"DocComment":""},{"DocComment":" Use `Fn` as a bound when you want to accept a parameter of function-like"},{"DocComment":" type and need to call it repeatedly and without mutating state (e.g., when"},{"DocComment":" calling it concurrently). If you do not need such strict requirements, use"},{"DocComment":" [`FnMut`] or [`FnOnce`] as bounds."},{"DocComment":""},{"DocComment":" See the [chapter on closures in *The Rust Programming Language*][book] for"},{"DocComment":" some more information on this topic."},{"DocComment":""},{"DocComment":" Also of note is the special syntax for `Fn` traits (e.g."},{"DocComment":" `Fn(usize, bool) -> usize`). Those interested in the technical details of"},{"DocComment":" this can refer to [the relevant section in the *Rustonomicon*][nomicon]."},{"DocComment":""},{"DocComment":" [book]: ../../book/ch13-01-closures.html"},{"DocComment":" [function pointers]: fn"},{"DocComment":" [nomicon]: ../../nomicon/hrtb.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ## Calling a closure"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let square = |x| x * x;"},{"DocComment":" assert_eq!(square(5), 25);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Using a `Fn` parameter"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" fn call_with_one<F>(func: F) -> usize"},{"DocComment":"     where F: Fn(usize) -> usize {"},{"DocComment":"     func(1)"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let double = |x| x * 2;"},{"DocComment":" assert_eq!(call_with_one(double), 2);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Args = \"()\", note =\n\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"),\non(Self = \"unsafe fn\", note =\n\"unsafe function cannot be called generically without an unsafe block\", label\n= \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"), message =\n\"expected a `{Trait}` closure, found `{Self}`\", label =\n\"expected an `{Trait}` closure, found `{Self}`\""}},{"Unknown":{"path":"fundamental","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"r#fn"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":1,"beg":{"line":76,"col":0},"end":{"line":80,"col":1}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":1,"span":{"span":{"file_id":1,"beg":{"line":76,"col":27},"end":{"line":76,"col":38}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":2,"span":{"span":{"file_id":1,"beg":{"line":76,"col":13},"end":{"line":76,"col":17}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":3,"span":{"span":{"file_id":1,"beg":{"line":76,"col":19},"end":{"line":76,"col":24}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["call",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":1,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[0,"call"]}}]],"vtable":{"id":{"Adt":0},"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"TraitType":[{"kind":{"ParentClause":[{"kind":{"ParentClause":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":0,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}],"const_generics":[],"trait_refs":[]}}},{"def_id":1,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnOnce",0]}],"span":{"span":{"file_id":1,"beg":{"line":242,"col":0},"end":{"line":242,"col":29}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The version of the call operator that takes a by-value receiver."},{"DocComment":""},{"DocComment":" Instances of `FnOnce` can be called, but might not be callable multiple"},{"DocComment":" times. Because of this, if the only thing known about a type is that it"},{"DocComment":" implements `FnOnce`, it can only be called once."},{"DocComment":""},{"DocComment":" `FnOnce` is implemented automatically by closures that might consume captured"},{"DocComment":" variables, as well as all types that implement [`FnMut`], e.g., (safe)"},{"DocComment":" [function pointers] (since `FnOnce` is a supertrait of [`FnMut`])."},{"DocComment":""},{"DocComment":" Since both [`Fn`] and [`FnMut`] are subtraits of `FnOnce`, any instance of"},{"DocComment":" [`Fn`] or [`FnMut`] can be used where a `FnOnce` is expected."},{"DocComment":""},{"DocComment":" Use `FnOnce` as a bound when you want to accept a parameter of function-like"},{"DocComment":" type and only need to call it once. If you need to call the parameter"},{"DocComment":" repeatedly, use [`FnMut`] as a bound; if you also need it to not mutate"},{"DocComment":" state, use [`Fn`]."},{"DocComment":""},{"DocComment":" See the [chapter on closures in *The Rust Programming Language*][book] for"},{"DocComment":" some more information on this topic."},{"DocComment":""},{"DocComment":" Also of note is the special syntax for `Fn` traits (e.g."},{"DocComment":" `Fn(usize, bool) -> usize`). Those interested in the technical details of"},{"DocComment":" this can refer to [the relevant section in the *Rustonomicon*][nomicon]."},{"DocComment":""},{"DocComment":" [book]: ../../book/ch13-01-closures.html"},{"DocComment":" [function pointers]: fn"},{"DocComment":" [nomicon]: ../../nomicon/hrtb.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ## Using a `FnOnce` parameter"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" fn consume_with_relish<F>(func: F)"},{"DocComment":"     where F: FnOnce() -> String"},{"DocComment":" {"},{"DocComment":"     // `func` consumes its captured variables, so it cannot be run more"},{"DocComment":"     // than once."},{"DocComment":"     println!(\"Consumed: {}\", func());"},{"DocComment":""},{"DocComment":"     println!(\"Delicious!\");"},{"DocComment":""},{"DocComment":"     // Attempting to invoke `func()` again will throw a `use of moved"},{"DocComment":"     // value` error for `func`."},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let x = String::from(\"x\");"},{"DocComment":" let consume_and_return_x = move || x;"},{"DocComment":" consume_with_relish(consume_and_return_x);"},{"DocComment":""},{"DocComment":" // `consume_and_return_x` can no longer be invoked at this point"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Args = \"()\", note =\n\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"),\non(Self = \"unsafe fn\", note =\n\"unsafe function cannot be called generically without an unsafe block\", label\n= \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"), message =\n\"expected a `{Trait}` closure, found `{Self}`\", label =\n\"expected an `{Trait}` closure, found `{Self}`\""}},{"Unknown":{"path":"fundamental","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"fn_once"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":1,"beg":{"line":242,"col":0},"end":{"line":251,"col":1}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":1,"span":{"span":{"file_id":1,"beg":{"line":242,"col":17},"end":{"line":242,"col":21}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":2,"span":{"span":{"file_id":1,"beg":{"line":242,"col":23},"end":{"line":242,"col":28}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":3,"span":{"span":{"file_id":1,"beg":{"line":246,"col":4},"end":{"line":246,"col":16}},"generated_from_span":null},"origin":{"TraitItem":"Output"},"trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TraitType":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":["Output"],"type_defaults":{},"type_clauses":[],"methods":[["call_once",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":7,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[1,"call_once"]}}]],"vtable":{"id":{"Adt":5},"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"TraitType":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}],"const_generics":[],"trait_refs":[]}}},{"def_id":2,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["function",0]},{"Ident":["FnMut",0]}],"span":{"span":{"file_id":1,"beg":{"line":163,"col":0},"end":{"line":163,"col":42}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" The version of the call operator that takes a mutable receiver."},{"DocComment":""},{"DocComment":" Instances of `FnMut` can be called repeatedly and may mutate state."},{"DocComment":""},{"DocComment":" `FnMut` is implemented automatically by closures which take mutable"},{"DocComment":" references to captured variables, as well as all types that implement"},{"DocComment":" [`Fn`], e.g., (safe) [function pointers] (since `FnMut` is a supertrait of"},{"DocComment":" [`Fn`]). Additionally, for any type `F` that implements `FnMut`, `&mut F`"},{"DocComment":" implements `FnMut`, too."},{"DocComment":""},{"DocComment":" Since [`FnOnce`] is a supertrait of `FnMut`, any instance of `FnMut` can be"},{"DocComment":" used where a [`FnOnce`] is expected, and since [`Fn`] is a subtrait of"},{"DocComment":" `FnMut`, any instance of [`Fn`] can be used where `FnMut` is expected."},{"DocComment":""},{"DocComment":" Use `FnMut` as a bound when you want to accept a parameter of function-like"},{"DocComment":" type and need to call it repeatedly, while allowing it to mutate state."},{"DocComment":" If you don't want the parameter to mutate state, use [`Fn`] as a"},{"DocComment":" bound; if you don't need to call it repeatedly, use [`FnOnce`]."},{"DocComment":""},{"DocComment":" See the [chapter on closures in *The Rust Programming Language*][book] for"},{"DocComment":" some more information on this topic."},{"DocComment":""},{"DocComment":" Also of note is the special syntax for `Fn` traits (e.g."},{"DocComment":" `Fn(usize, bool) -> usize`). Those interested in the technical details of"},{"DocComment":" this can refer to [the relevant section in the *Rustonomicon*][nomicon]."},{"DocComment":""},{"DocComment":" [book]: ../../book/ch13-01-closures.html"},{"DocComment":" [function pointers]: fn"},{"DocComment":" [nomicon]: ../../nomicon/hrtb.html"},{"DocComment":""},{"DocComment":" # Examples"},{"DocComment":""},{"DocComment":" ## Calling a mutably capturing closure"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" let mut x = 5;"},{"DocComment":" {"},{"DocComment":"     let mut square_x = || x *= x;"},{"DocComment":"     square_x();"},{"DocComment":" }"},{"DocComment":" assert_eq!(x, 25);"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## Using a `FnMut` parameter"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" fn do_twice<F>(mut func: F)"},{"DocComment":"     where F: FnMut()"},{"DocComment":" {"},{"DocComment":"     func();"},{"DocComment":"     func();"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" let mut x: usize = 1;"},{"DocComment":" {"},{"DocComment":"     let add_two_to_x = || x += 2;"},{"DocComment":"     do_twice(add_two_to_x);"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" assert_eq!(x, 5);"},{"DocComment":" ```"},{"Unknown":{"path":"rustc_on_unimplemented","args":"on(Args = \"()\", note =\n\"wrap the `{Self}` in a closure with no arguments: `|| {{ /* code */ }}`\"),\non(Self = \"unsafe fn\", note =\n\"unsafe function cannot be called generically without an unsafe block\", label\n= \"call the function in a closure: `|| unsafe {{ /* code */ }}`\"), message =\n\"expected a `{Trait}` closure, found `{Self}`\", label =\n\"expected an `{Trait}` closure, found `{Self}`\""}},{"Unknown":{"path":"fundamental","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"fn_mut"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"},{"index":1,"name":"Args"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":1,"beg":{"line":163,"col":0},"end":{"line":167,"col":1}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":1,"span":{"span":{"file_id":1,"beg":{"line":163,"col":30},"end":{"line":163,"col":42}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":2,"span":{"span":{"file_id":1,"beg":{"line":163,"col":16},"end":{"line":163,"col":20}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},{"clause_id":3,"span":{"span":{"file_id":1,"beg":{"line":163,"col":22},"end":{"line":163,"col":27}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["call_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":5,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[2,"call_mut"]}}]],"vtable":{"id":{"Adt":4},"generics":{"regions":[],"types":[{"TypeVar":{"Free":1}},{"TraitType":[{"kind":{"ParentClause":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},1]},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}},{"TypeVar":{"Free":1}}],"const_generics":[],"trait_refs":[]}}}},"Output"]}],"const_generics":[],"trait_refs":[]}}},{"def_id":3,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["MetaSized",0]}],"span":{"span":{"file_id":5,"beg":{"line":179,"col":0},"end":{"line":179,"col":33}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Types with a size that can be determined from pointer metadata."},{"Unknown":{"path":"diagnostic::on_unimplemented","args":"message = \"the size for values of type `{Self}` cannot be known\", label =\n\"doesn't have a known size\""}},{"Unknown":{"path":"fundamental","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"meta_sized"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[],"vtable":{"id":{"Adt":3},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},{"def_id":4,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Sized",0]}],"span":{"span":{"file_id":5,"beg":{"line":161,"col":0},"end":{"line":161,"col":26}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Types with a constant size known at compile time."},{"DocComment":""},{"DocComment":" All type parameters have an implicit bound of `Sized`. The special syntax"},{"DocComment":" `?Sized` can be used to remove this bound if it's not appropriate."},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(dead_code)]"},{"DocComment":" struct Foo<T>(T);"},{"DocComment":" struct Bar<T: ?Sized>(T);"},{"DocComment":""},{"DocComment":" // struct FooUse(Foo<[i32]>); // error: Sized is not implemented for [i32]"},{"DocComment":" struct BarUse(Bar<[i32]>); // OK"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The one exception is the implicit `Self` type of a trait. A trait does not"},{"DocComment":" have an implicit `Sized` bound as this is incompatible with [trait object]s"},{"DocComment":" where, by definition, the trait needs to work with all possible implementors,"},{"DocComment":" and thus could be any size."},{"DocComment":""},{"DocComment":" Although Rust will let you bind `Sized` to a trait, you won't"},{"DocComment":" be able to use it to form a trait object later:"},{"DocComment":""},{"DocComment":" ```"},{"DocComment":" # #![allow(unused_variables)]"},{"DocComment":" trait Foo { }"},{"DocComment":" trait Bar: Sized { }"},{"DocComment":""},{"DocComment":" struct Impl;"},{"DocComment":" impl Foo for Impl { }"},{"DocComment":" impl Bar for Impl { }"},{"DocComment":""},{"DocComment":" let x: &dyn Foo = &Impl;    // OK"},{"DocComment":" // let y: &dyn Bar = &Impl; // error: the trait `Bar` cannot"},{"DocComment":"                             // be made into an object"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" [trait object]: ../../book/ch17-02-trait-objects.html"},{"Unknown":{"path":"doc","args":"alias = \"?\", alias = \"?Sized\""}},{"Unknown":{"path":"diagnostic::on_unimplemented","args":"message =\n\"the size for values of type `{Self}` cannot be known at compilation time\",\nlabel = \"doesn't have a size known at compile-time\""}},{"Unknown":{"path":"fundamental","args":null}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"sized"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":5,"beg":{"line":161,"col":17},"end":{"line":161,"col":26}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[],"vtable":null},{"def_id":5,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["marker",0]},{"Ident":["Tuple",0]}],"span":{"span":{"file_id":5,"beg":{"line":1067,"col":0},"end":{"line":1067,"col":15}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" A marker for tuple types."},{"DocComment":""},{"DocComment":" The implementation of this trait is built-in and cannot be implemented"},{"DocComment":" for any user type."},{"Unknown":{"path":"diagnostic::on_unimplemented","args":"message = \"`{Self}` is not a tuple\""}}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"tuple_trait"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":5,"beg":{"line":1067,"col":0},"end":{"line":1067,"col":18}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[],"vtable":{"id":{"Adt":6},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}},{"def_id":6,"item_meta":{"name":[{"Ident":["core",0]},{"Ident":["ops",0]},{"Ident":["drop",0]},{"Ident":["Drop",0]}],"span":{"span":{"file_id":6,"beg":{"line":208,"col":0},"end":{"line":208,"col":14}},"generated_from_span":null},"source_text":null,"attr_info":{"attributes":[{"DocComment":" Custom code within the destructor."},{"DocComment":""},{"DocComment":" When a value is no longer needed, Rust will run a \"destructor\" on that value."},{"DocComment":" The most common way that a value is no longer needed is when it goes out of"},{"DocComment":" scope. Destructors may still run in other circumstances, but we're going to"},{"DocComment":" focus on scope for the examples here. To learn about some of those other cases,"},{"DocComment":" please see [the reference] section on destructors."},{"DocComment":""},{"DocComment":" [the reference]: https://doc.rust-lang.org/reference/destructors.html"},{"DocComment":""},{"DocComment":" This destructor consists of two components:"},{"DocComment":" - A call to `Drop::drop` for that value, if this special `Drop` trait is implemented for its type."},{"DocComment":" - The automatically generated \"drop glue\" which recursively calls the destructors"},{"DocComment":"     of all the fields of this value."},{"DocComment":""},{"DocComment":" As Rust automatically calls the destructors of all contained fields,"},{"DocComment":" you don't have to implement `Drop` in most cases. But there are some cases where"},{"DocComment":" it is useful, for example for types which directly manage a resource."},{"DocComment":" That resource may be memory, it may be a file descriptor, it may be a network socket."},{"DocComment":" Once a value of that type is no longer going to be used, it should \"clean up\" its"},{"DocComment":" resource by freeing the memory or closing the file or socket. This is"},{"DocComment":" the job of a destructor, and therefore the job of `Drop::drop`."},{"DocComment":""},{"DocComment":" ## Examples"},{"DocComment":""},{"DocComment":" To see destructors in action, let's take a look at the following program:"},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" struct HasDrop;"},{"DocComment":""},{"DocComment":" impl Drop for HasDrop {"},{"DocComment":"     fn drop(&mut self) {"},{"DocComment":"         println!(\"Dropping HasDrop!\");"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" struct HasTwoDrops {"},{"DocComment":"     one: HasDrop,"},{"DocComment":"     two: HasDrop,"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" impl Drop for HasTwoDrops {"},{"DocComment":"     fn drop(&mut self) {"},{"DocComment":"         println!(\"Dropping HasTwoDrops!\");"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" fn main() {"},{"DocComment":"     let _x = HasTwoDrops { one: HasDrop, two: HasDrop };"},{"DocComment":"     println!(\"Running!\");"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Rust will first call `Drop::drop` for `_x` and then for both `_x.one` and `_x.two`,"},{"DocComment":" meaning that running this will print"},{"DocComment":""},{"DocComment":" ```text"},{"DocComment":" Running!"},{"DocComment":" Dropping HasTwoDrops!"},{"DocComment":" Dropping HasDrop!"},{"DocComment":" Dropping HasDrop!"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Even if we remove the implementation of `Drop` for `HasTwoDrop`, the destructors of its fields are still called."},{"DocComment":" This would result in"},{"DocComment":""},{"DocComment":" ```test"},{"DocComment":" Running!"},{"DocComment":" Dropping HasDrop!"},{"DocComment":" Dropping HasDrop!"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" ## You cannot call `Drop::drop` yourself"},{"DocComment":""},{"DocComment":" Because `Drop::drop` is used to clean up a value, it may be dangerous to use this value after"},{"DocComment":" the method has been called. As `Drop::drop` does not take ownership of its input,"},{"DocComment":" Rust prevents misuse by not allowing you to call `Drop::drop` directly."},{"DocComment":""},{"DocComment":" In other words, if you tried to explicitly call `Drop::drop` in the above example, you'd get a compiler error."},{"DocComment":""},{"DocComment":" If you'd like to explicitly call the destructor of a value, [`mem::drop`] can be used instead."},{"DocComment":""},{"DocComment":" [`mem::drop`]: drop"},{"DocComment":""},{"DocComment":" ## Drop order"},{"DocComment":""},{"DocComment":" Which of our two `HasDrop` drops first, though? For structs, it's the same"},{"DocComment":" order that they're declared: first `one`, then `two`. If you'd like to try"},{"DocComment":" this yourself, you can modify `HasDrop` above to contain some data, like an"},{"DocComment":" integer, and then use it in the `println!` inside of `Drop`. This behavior is"},{"DocComment":" guaranteed by the language."},{"DocComment":""},{"DocComment":" Unlike for structs, local variables are dropped in reverse order:"},{"DocComment":""},{"DocComment":" ```rust"},{"DocComment":" struct Foo;"},{"DocComment":""},{"DocComment":" impl Drop for Foo {"},{"DocComment":"     fn drop(&mut self) {"},{"DocComment":"         println!(\"Dropping Foo!\")"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" struct Bar;"},{"DocComment":""},{"DocComment":" impl Drop for Bar {"},{"DocComment":"     fn drop(&mut self) {"},{"DocComment":"         println!(\"Dropping Bar!\")"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" fn main() {"},{"DocComment":"     let _foo = Foo;"},{"DocComment":"     let _bar = Bar;"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" This will print"},{"DocComment":""},{"DocComment":" ```text"},{"DocComment":" Dropping Bar!"},{"DocComment":" Dropping Foo!"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" Please see [the reference] for the full rules."},{"DocComment":""},{"DocComment":" [the reference]: https://doc.rust-lang.org/reference/destructors.html"},{"DocComment":""},{"DocComment":" ## `Copy` and `Drop` are exclusive"},{"DocComment":""},{"DocComment":" You cannot implement both [`Copy`] and `Drop` on the same type. Types that"},{"DocComment":" are `Copy` get implicitly duplicated by the compiler, making it very"},{"DocComment":" hard to predict when, and how often destructors will be executed. As such,"},{"DocComment":" these types cannot have destructors."},{"DocComment":""},{"DocComment":" ## Drop check"},{"DocComment":""},{"DocComment":" Dropping interacts with the borrow checker in subtle ways: when a type `T` is being implicitly"},{"DocComment":" dropped as some variable of this type goes out of scope, the borrow checker needs to ensure that"},{"DocComment":" calling `T`'s destructor at this moment is safe. In particular, it also needs to be safe to"},{"DocComment":" recursively drop all the fields of `T`. For example, it is crucial that code like the following"},{"DocComment":" is being rejected:"},{"DocComment":""},{"DocComment":" ```compile_fail,E0597"},{"DocComment":" use std::cell::Cell;"},{"DocComment":""},{"DocComment":" struct S<'a>(Cell<Option<&'a S<'a>>>, Box<i32>);"},{"DocComment":" impl Drop for S<'_> {"},{"DocComment":"     fn drop(&mut self) {"},{"DocComment":"         if let Some(r) = self.0.get() {"},{"DocComment":"             // Print the contents of the `Box` in `r`."},{"DocComment":"             println!(\"{}\", r.1);"},{"DocComment":"         }"},{"DocComment":"     }"},{"DocComment":" }"},{"DocComment":""},{"DocComment":" fn main() {"},{"DocComment":"     // Set up two `S` that point to each other."},{"DocComment":"     let s1 = S(Cell::new(None), Box::new(42));"},{"DocComment":"     let s2 = S(Cell::new(Some(&s1)), Box::new(42));"},{"DocComment":"     s1.0.set(Some(&s2));"},{"DocComment":"     // Now they both get dropped. But whichever is the 2nd one"},{"DocComment":"     // to be dropped will access the `Box` in the first one,"},{"DocComment":"     // which is a use-after-free!"},{"DocComment":" }"},{"DocComment":" ```"},{"DocComment":""},{"DocComment":" The Nomicon discusses the need for [drop check in more detail][drop check]."},{"DocComment":""},{"DocComment":" To reject such code, the \"drop check\" analysis determines which types and lifetimes need to"},{"DocComment":" still be live when `T` gets dropped. The exact details of this analysis are not yet"},{"DocComment":" stably guaranteed and **subject to change**. Currently, the analysis works as follows:"},{"DocComment":" - If `T` has no drop glue, then trivially nothing is required to be live. This is the case if"},{"DocComment":"   neither `T` nor any of its (recursive) fields have a destructor (`impl Drop`). [`PhantomData`],"},{"DocComment":"   arrays of length 0 and [`ManuallyDrop`] are considered to never have a destructor, no matter"},{"DocComment":"   their field type."},{"DocComment":" - If `T` has drop glue, then, for all types `U` that are *owned* by any field of `T`,"},{"DocComment":"   recursively add the types and lifetimes that need to be live when `U` gets dropped. The set of"},{"DocComment":"   owned types is determined by recursively traversing `T`:"},{"DocComment":"   - Recursively descend through `PhantomData`, `Box`, tuples, and arrays (excluding arrays of"},{"DocComment":"     length 0)."},{"DocComment":"   - Stop at reference and raw pointer types as well as function pointers and function items;"},{"DocComment":"     they do not own anything."},{"DocComment":"   - Stop at non-composite types (type parameters that remain generic in the current context and"},{"DocComment":"     base types such as integers and `bool`); these types are owned."},{"DocComment":"   - When hitting an ADT with `impl Drop`, stop there; this type is owned."},{"DocComment":"   - When hitting an ADT without `impl Drop`, recursively descend to its fields. (For an `enum`,"},{"DocComment":"     consider all fields of all variants.)"},{"DocComment":" - Furthermore, if `T` implements `Drop`, then all generic (lifetime and type) parameters of `T`"},{"DocComment":"   must be live."},{"DocComment":""},{"DocComment":" In the above example, the last clause implies that `'a` must be live when `S<'a>` is dropped,"},{"DocComment":" and hence the example is rejected. If we remove the `impl Drop`, the liveness requirement"},{"DocComment":" disappears and the example is accepted."},{"DocComment":""},{"DocComment":" There exists an unstable way for a type to opt-out of the last clause; this is called \"drop"},{"DocComment":" check eyepatch\" or `may_dangle`. For more details on this nightly-only feature, see the"},{"DocComment":" [discussion in the Nomicon][nomicon]."},{"DocComment":""},{"DocComment":" [`ManuallyDrop`]: crate::mem::ManuallyDrop"},{"DocComment":" [`PhantomData`]: crate::marker::PhantomData"},{"DocComment":" [drop check]: ../../nomicon/dropck.html"},{"DocComment":" [nomicon]: ../../nomicon/phantom-data.html#an-exception-the-special-case-of-the-standard-library-and-its-unstable-may_dangle"}],"inline":null,"rename":null,"public":true},"is_local":false,"opacity":"Foreign","lang_item":"drop"},"generics":{"regions":[],"types":[{"index":0,"name":"Self"}],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_clauses":[{"clause_id":0,"span":{"span":{"file_id":6,"beg":{"line":208,"col":0},"end":{"line":242,"col":1}},"generated_from_span":null},"origin":"WhereClauseOnTrait","trait_":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"const_defaults":{},"types":[],"type_defaults":{},"type_clauses":[],"methods":[["drop",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":6,"generics":{"regions":[{"Var":{"Bound":[0,0]}}],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[{"kind":"SelfId","trait_decl_ref":{"regions":[],"skip_binder":{"id":6,"generics":{"regions":[],"types":[{"TypeVar":{"Free":0}}],"const_generics":[],"trait_refs":[]}}}}]}},"kind":{"TraitMethod":[6,"drop"]}}]],"vtable":{"id":{"Adt":2},"generics":{"regions":[],"types":[],"const_generics":[],"trait_refs":[]}}}],"trait_impls":[{"def_id":0,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":0}}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"source_text":"|x| x + y","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"impl_trait":{"id":0,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"TraitImpl":{"id":1,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":2,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[["call",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":2,"generics":{"regions":[{"Var":{"Free":0}},{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[0,"call"]}}]],"vtable":{"id":0,"generics":{"regions":[],"types":[{"Error":"Unexpected error: could not find the type variable <closure_kind>"},{"Error":"Unexpected error: could not find the type variable <closure_signature>"},{"Error":"Unexpected error: could not find the type variable <upvars>"}],"const_generics":[],"trait_refs":[]}}},{"def_id":1,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":1}}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"source_text":"|x| x + y","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"impl_trait":{"id":2,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"TraitImpl":{"id":2,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":1,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[],"type_clauses":[],"methods":[["call_mut",{"params":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":3,"generics":{"regions":[{"Var":{"Free":0}},{"Var":{"Bound":[0,0]}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[2,"call_mut"]}}]],"vtable":{"id":1,"generics":{"regions":[],"types":[{"Error":"Unexpected error: could not find the type variable <closure_kind>"},{"Error":"Unexpected error: could not find the type variable <closure_signature>"},{"Error":"Unexpected error: could not find the type variable <upvars>"}],"const_generics":[],"trait_refs":[]}}},{"def_id":2,"item_meta":{"name":[{"Ident":["closure_vtable_test",0]},{"Ident":["main",0]},{"Impl":{"Trait":2}}],"span":{"span":{"file_id":0,"beg":{"line":3,"col":32},"end":{"line":3,"col":41}},"generated_from_span":null},"source_text":"|x| x + y","attr_info":{"attributes":[],"inline":null,"rename":null,"public":false},"is_local":true,"opacity":"Transparent","lang_item":null},"impl_trait":{"id":1,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}},{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}},"generics":{"regions":[{"index":0,"name":null}],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":{"Adt":1},"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":5,"generics":{"regions":[],"types":[{"Adt":{"id":"Tuple","generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}],"const_generics":[],"trait_refs":[]}}}},{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[{"kind":{"BuiltinOrAuto":{"parent_trait_refs":[],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":3,"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}}],"types":[]}},"trait_decl_ref":{"regions":[],"skip_binder":{"id":4,"generics":{"regions":[],"types":[{"Literal":{"Int":"I32"}}],"const_generics":[],"trait_refs":[]}}}}],"consts":[],"types":[["Output",{"Literal":{"Int":"I32"}}]],"type_clauses":[],"methods":[["call_once",{"params":{"regions":[],"types":[],"const_generics":[],"trait_clauses":[],"regions_outlive":[],"types_outlive":[],"trait_type_constraints":[]},"skip_binder":{"id":4,"generics":{"regions":[{"Var":{"Free":0}}],"types":[],"const_generics":[],"trait_refs":[]}},"kind":{"TraitMethod":[1,"call_once"]}}]],"vtable":{"id":2,"generics":{"regions":[],"types":[{"Error":"Unexpected error: could not find the type variable <closure_kind>"},{"Error":"Unexpected error: could not find the type variable <closure_signature>"},{"Error":"Unexpected error: could not find the type variable <upvars>"}],"const_generics":[],"trait_refs":[]}}}],"ordered_decls":[{"TraitDecl":{"NonRec":3}},{"TraitDecl":{"NonRec":4}},{"TraitDecl":{"NonRec":5}},{"TraitDecl":{"NonRec":6}},{"Fun":{"NonRec":6}},{"TraitDecl":{"NonRec":1}},{"TraitDecl":{"NonRec":2}},{"Mixed":{"Rec":[{"Type":0},{"TraitDecl":0}]}},{"Fun":{"NonRec":1}},{"Fun":{"NonRec":5}},{"Fun":{"NonRec":7}},{"Type":{"NonRec":1}},{"Fun":{"NonRec":2}},{"Fun":{"NonRec":3}},{"Fun":{"NonRec":4}},{"TraitImpl":{"NonRec":2}},{"TraitImpl":{"NonRec":1}},{"TraitImpl":{"NonRec":0}},{"Fun":{"NonRec":0}}]}}