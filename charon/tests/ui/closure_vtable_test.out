# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

// Full name: core::ops::drop::Drop::drop
pub fn drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>[Self]
    vtable: core::ops::function::FnOnce::{vtable}<Args, Self::Output>
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnOnce<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>[Self]
    vtable: core::ops::function::FnMut::{vtable}<Args, Self::parent_clause1::Output>
}

struct core::ops::function::Fn::{vtable}<Args, Ty0> {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0)),
  method_call: fn<'_0>(&'_0_0 ((dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0)), Args) -> Fn<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0), Args>::parent_clause1::parent_clause1::Output,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
  super_trait_1: &'static (core::ops::function::FnMut::{vtable}<Args, Fn<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0), Args>::parent_clause1::parent_clause1::Output>),
}

// Full name: core::ops::function::Fn
#[lang_item("r#fn")]
pub trait Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnMut<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>[Self]
    vtable: core::ops::function::Fn::{vtable}<Args, Self::parent_clause1::parent_clause1::Output>
}

pub fn core::ops::function::Fn::call<'_0, Self, Args>(@1: &'_0 (Self), @2: Args) -> @TraitClause0::parent_clause1::parent_clause1::Output
where
    [@TraitClause0]: Fn<Self, Args>,

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> @TraitClause0::parent_clause1::Output
where
    [@TraitClause0]: FnMut<Self, Args>,

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

// Full name: test_crate::main::closure
struct closure<'_0> {
  &'_0 (i32),
}

// Full name: test_crate::main::{impl Fn<(i32)> for closure<'_0>}::call
fn {impl Fn<(i32)> for closure<'_0>}::call<'_0, '_1>(@1: &'_1 (closure<'_0>), @2: (i32)) -> i32
{
    let @0: i32; // return
    let @1: &'_ (closure<'_0>); // arg #1
    let tupled_args@2: (i32); // arg #2
    let x@3: i32; // local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: i32; // anonymous local

    storage_live(x@3)
    storage_live(@6)
    x@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := copy (x@3)
    storage_live(@5)
    @5 := copy (*((*(@1)).0))
    @6 := copy (@4) panic.+ copy (@5)
    @0 := move (@6)
    storage_dead(@5)
    storage_dead(@4)
    return
}

// Full name: test_crate::main::{impl FnMut<(i32)> for closure<'_0>}::call_mut
fn {impl FnMut<(i32)> for closure<'_0>}::call_mut<'_0, '_1>(@1: &'_1 mut (closure<'_0>), @2: (i32)) -> i32
{
    let @0: i32; // return
    let state@1: &'_1 mut (closure<'_0>); // arg #1
    let args@2: (i32); // arg #2
    let @3: &'_ (closure<'_0>); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := {impl Fn<(i32)> for closure<'_0>}::call<'_0, '_>(move (@3), move (args@2))
    return
}

// Full name: test_crate::main::{impl FnOnce<(i32)> for closure<'_0>}::call_once
fn {impl FnOnce<(i32)> for closure<'_0>}::call_once<'_0>(@1: closure<'_0>, @2: (i32)) -> i32
{
    let @0: i32; // return
    let @1: closure<'_0>; // arg #1
    let @2: (i32); // arg #2
    let @3: &'_ mut (closure<'_0>); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := {impl FnMut<(i32)> for closure<'_0>}::call_mut<'_0, '_>(move (@3), move (@2))
    drop[Drop<closure<'_0>>] @1
    return
}

// Full name: test_crate::main::{impl FnOnce<(i32)> for closure<'_0>}
impl<'_0> FnOnce<(i32)> for closure<'_0> {
    parent_clause0 = MetaSized<closure<'_0>>
    parent_clause1 = Sized<(i32)>
    parent_clause2 = Tuple<(i32)>
    parent_clause3 = Sized<i32>
    type Output = i32
    fn call_once = {impl FnOnce<(i32)> for closure<'_0>}::call_once<'_0>
    non-dyn-compatible
}

// Full name: test_crate::main::{impl FnMut<(i32)> for closure<'_0>}
impl<'_0> FnMut<(i32)> for closure<'_0> {
    parent_clause0 = MetaSized<closure<'_0>>
    parent_clause1 = {impl FnOnce<(i32)> for closure<'_0>}<'_0>
    parent_clause2 = Sized<(i32)>
    parent_clause3 = Tuple<(i32)>
    fn call_mut<'_0> = {impl FnMut<(i32)> for closure<'_0>}::call_mut<'_0, '_0_0>
    non-dyn-compatible
}

// Full name: test_crate::main::{impl Fn<(i32)> for closure<'_0>}
impl<'_0> Fn<(i32)> for closure<'_0> {
    parent_clause0 = MetaSized<closure<'_0>>
    parent_clause1 = {impl FnMut<(i32)> for closure<'_0>}<'_0>
    parent_clause2 = Sized<(i32)>
    parent_clause3 = Tuple<(i32)>
    fn call<'_0> = {impl Fn<(i32)> for closure<'_0>}::call<'_0, '_0_0>
    non-dyn-compatible
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let y@1: i32; // local
    let f@2: &'_ ((dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)); // local
    let @3: &'_ (closure<'_>); // anonymous local
    let @4: &'_ (closure<'_>); // anonymous local
    let @5: closure<'_>; // anonymous local
    let @6: &'_ (i32); // anonymous local
    let @7: (); // anonymous local
    let @8: bool; // anonymous local
    let @9: i32; // anonymous local
    let @10: &'_ ((dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)); // anonymous local
    let @11: (i32); // anonymous local

    storage_live(y@1)
    y@1 := const (10 : i32)
    storage_live(f@2)
    storage_live(@3)
    storage_live(@4)
    storage_live(@5)
    storage_live(@6)
    @6 := &y@1
    @5 := closure { 0: move (@6) }
    storage_dead(@6)
    @4 := &@5
    @3 := &*(@4)
    f@2 := unsize_cast<&'_ (closure<'_>), &'_ ((dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)), {impl Fn<(i32)> for closure<'_0>}<'_>>(move (@3))
    storage_dead(@3)
    storage_dead(@4)
    storage_live(@7)
    storage_live(@8)
    storage_live(@9)
    storage_live(@10)
    @10 := &*(f@2)
    storage_live(@11)
    @11 := (const (0 : i32))
    @9 := Fn<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32), (i32)>::call<'_>(move (@10), move (@11))
    storage_dead(@11)
    storage_dead(@10)
    @8 := move (@9) > const (0 : i32)
    if move (@8) {
    }
    else {
        storage_dead(@9)
        panic(core::panicking::panic)
    }
    storage_dead(@9)
    storage_dead(@8)
    storage_dead(@7)
    @0 := ()
    storage_dead(@5)
    storage_dead(f@2)
    storage_dead(y@1)
    @0 := ()
    return
}



