# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

struct test_crate::main::AssertIsAsBytes {}

// Full name: test_crate::main::AssertIsAsBytes::{impl Drop for test_crate::main::AssertIsAsBytes}
impl Drop for test_crate::main::AssertIsAsBytes {
    parent_clause0 = MetaSized<test_crate::main::AssertIsAsBytes>
    fn drop<'_0> = {impl Drop for test_crate::main::AssertIsAsBytes}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::main::AssertIsAsBytes::{impl Drop for test_crate::main::AssertIsAsBytes}::drop
fn {impl Drop for test_crate::main::AssertIsAsBytes}::drop<'_0>(@1: &'_0 mut (test_crate::main::AssertIsAsBytes))
{
    let @0: (); // return
    let @1: *mut test_crate::main::AssertIsAsBytes; // arg #1
    let @2: &'_ mut (test_crate::main::AssertIsAsBytes); // anonymous local

    storage_live(@2)
    @2 := &mut *(@1)
    @0 := ()
    return
}

struct test_crate::main::AssertIsAsBytes#1 {}

// Full name: test_crate::main::AssertIsAsBytes#1::{impl Drop for test_crate::main::AssertIsAsBytes#1}
impl Drop for test_crate::main::AssertIsAsBytes#1 {
    parent_clause0 = MetaSized<test_crate::main::AssertIsAsBytes#1>
    fn drop<'_0> = {impl Drop for test_crate::main::AssertIsAsBytes#1}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::main::AssertIsAsBytes#1::{impl Drop for test_crate::main::AssertIsAsBytes#1}::drop
fn {impl Drop for test_crate::main::AssertIsAsBytes#1}::drop<'_0>(@1: &'_0 mut (test_crate::main::AssertIsAsBytes#1))
{
    let @0: (); // return
    let @1: *mut test_crate::main::AssertIsAsBytes#1; // arg #1
    let @2: &'_ mut (test_crate::main::AssertIsAsBytes#1); // anonymous local

    storage_live(@2)
    @2 := &mut *(@1)
    @0 := ()
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local
    let @2: test_crate::main::AssertIsAsBytes; // anonymous local
    let @3: (); // anonymous local
    let @4: test_crate::main::AssertIsAsBytes#1; // anonymous local

    storage_live(@1)
    storage_live(@2)
    @2 := test_crate::main::AssertIsAsBytes {  }
    storage_dead(@2)
    storage_dead(@1)
    storage_live(@3)
    storage_live(@4)
    @4 := test_crate::main::AssertIsAsBytes#1 {  }
    storage_dead(@4)
    storage_dead(@3)
    @0 := ()
    @0 := ()
    return
}



