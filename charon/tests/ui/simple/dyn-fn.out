
thread 'rustc' panicked at src/bin/charon-driver/translate/translate_functions.rs:62:18:
Unexpected definition for function: FullDef { this: ItemRef { contents: Node { id: Id { id: 270 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [Type(Ty { kind: Node { id: Id { id: 266 }, value: Param(ParamTy { index: 0, name: "<closure_kind>" }) } }), Type(Ty { kind: Node { id: Id { id: 267 }, value: Param(ParamTy { index: 1, name: "<closure_signature>" }) } }), Type(Ty { kind: Node { id: Id { id: 268 }, value: Param(ParamTy { index: 2, name: "<upvars>" }) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, span: Span { lo: Loc { line: 8, col: 14 }, hi: Loc { line: 8, col: 23 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(tests/ui/simple/dyn-fn.rs:8:15: 8:24 (#0)) }, source_span: Some(Span { lo: Loc { line: 8, col: 14 }, hi: Loc { line: 11, col: 5 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(tests/ui/simple/dyn-fn.rs:8:15: 11:6 (#0)) }), source_text: Some("|counter| {\n        *counter += 1;\n        true\n    }"), attributes: [], visibility: None, lang_item: None, diagnostic_item: None, kind: Closure { args: ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 235 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Named(core::ops::function::Fn::call::'_, "'_") }) }, Ty { kind: Node { id: Id { id: 234 }, value: Dynamic(ParamTy { index: 4, name: "_dyn" }, GenericPredicates { predicates: [(Clause { kind: Binder { value: Trait(TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }), bound_vars: [] }, id: PredicateId(7174807728199507765) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) }), (Clause { kind: Binder { value: Projection(ProjectionPredicate { impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(7174807728199507765), index: 0, trait: Binder { value: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, path: [Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 232 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(1901191129474274469), index: 1 }, Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(14737305105355114170), index: 1 }] } }, assoc_item: AssocItem { def_id: core::ops::function::FnOnce::Output, name: Some("Output"), kind: Type { data: Normal("Output") }, container: TraitContainer { trait_ref: ItemRef { contents: Node { id: Id { id: 27 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 25 }, value: Param(ParamTy { index: 0, name: "Self" }) } }), Type(Ty { kind: Node { id: Id { id: 26 }, value: Param(ParamTy { index: 1, name: "Args" }) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } } }, has_value: false }, ty: Ty { kind: Node { id: Id { id: 233 }, value: Bool } } }), bound_vars: [] }, id: PredicateId(403815367319714153) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) })] }, Region { kind: ReErased }) } }, false) } }, Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Named(core::ops::function::Fn::call::'_, "'_"))] }, upvar_tys: [] }, is_const: false, vtable_sig: Some(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 235 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Named(core::ops::function::Fn::call::'_, "'_") }) }, Ty { kind: Node { id: Id { id: 234 }, value: Dynamic(ParamTy { index: 4, name: "_dyn" }, GenericPredicates { predicates: [(Clause { kind: Binder { value: Trait(TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }), bound_vars: [] }, id: PredicateId(7174807728199507765) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) }), (Clause { kind: Binder { value: Projection(ProjectionPredicate { impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(7174807728199507765), index: 0, trait: Binder { value: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, path: [Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 232 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(1901191129474274469), index: 1 }, Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(14737305105355114170), index: 1 }] } }, assoc_item: AssocItem { def_id: core::ops::function::FnOnce::Output, name: Some("Output"), kind: Type { data: Normal("Output") }, container: TraitContainer { trait_ref: ItemRef { contents: Node { id: Id { id: 27 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 25 }, value: Param(ParamTy { index: 0, name: "Self" }) } }), Type(Ty { kind: Node { id: Id { id: 26 }, value: Param(ParamTy { index: 1, name: "Args" }) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } } }, has_value: false }, ty: Ty { kind: Node { id: Id { id: 233 }, value: Bool } } }), bound_vars: [] }, id: PredicateId(403815367319714153) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) })] }, Region { kind: ReErased }) } }, false) } }, Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Named(core::ops::function::Fn::call::'_, "'_"))] }), fn_once_impl: VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(Ty { kind: Node { id: Id { id: 238 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 264 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] }, fn_mut_impl: Some(VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 241 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(core::ops::function::FnOnce::Output, Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 247 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 238 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] }), fn_impl: Some(VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 265 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 241 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(core::ops::function::FnOnce::Output, Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 247 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 238 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] }), once_shim: Some(MirBody { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, local_decls: IndexVec { raw: [LocalDecl { mutability: true, ty: Ty { kind: Node { id: Id { id: 238 }, value: Bool } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }, LocalDecl { mutability: false, ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }, LocalDecl { mutability: false, ty: Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }, LocalDecl { mutability: false, ty: Ty { kind: Node { id: Id { id: 240 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, true) } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }], _marker: PhantomData<fn(&hax_frontend_exporter::types::mir::Local)> }, arg_count: 2, basic_blocks: IndexVec { raw: [BasicBlockData { statements: [Statement { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Assign((Place { ty: Ty { kind: Node { id: Id { id: 240 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, true) } }, kind: Local(Local(3)) }, Ref(Region { kind: ReErased }, Mut { kind: Default }, Place { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, kind: Local(Local(1)) }))) }], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Call { fun: Static(ItemRef { contents: Node { id: Id { id: 249 }, value: ItemRefContents { def_id: core::ops::function::FnMut::call_mut, generic_args: [], impl_exprs: [], in_trait: Some(ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 241 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(core::ops::function::FnOnce::Output, Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 247 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 238 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] } }), has_param: false, has_non_lt_param: false } } }), late_bound_generics: [Lifetime(Region { kind: ReErased })], args: [Spanned { node: Move(Place { ty: Ty { kind: Node { id: Id { id: 240 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, true) } }, kind: Local(Local(3)) }), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) } }, Spanned { node: Move(Place { ty: Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }, kind: Local(Local(2)) }), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) } }], destination: Place { ty: Ty { kind: Node { id: Id { id: 238 }, value: Bool } }, kind: Local(Local(0)) }, target: Some(BasicBlock(1)), unwind: Cleanup(BasicBlock(3)), fn_span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) } } }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Drop { place: Place { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, kind: Local(Local(1)) }, impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 253 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 255 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 256 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 259 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 260 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 262 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } }, impl_exprs: [] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 263 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, target: BasicBlock(2), unwind: Continue } }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Return }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Drop { place: Place { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, kind: Local(Local(1)) }, impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 253 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 255 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 256 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 259 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 260 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 262 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } }, impl_exprs: [] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 263 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, target: BasicBlock(4), unwind: Terminate(UnwindTerminateReason { todo: "InCleanup" }) } }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: UnwindResume }), is_cleanup: true }], _marker: PhantomData<fn(&hax_frontend_exporter::types::mir::BasicBlock)> }, source_scopes: IndexVec { raw: [SourceScopeData { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, parent_scope: None, inlined_parent_scope: None }], _marker: PhantomData<fn(&hax_frontend_exporter::types::mir::SourceScope)> }, tainted_by_errors: None, _kind: PhantomData<hax_frontend_exporter::types::mir::mir_kinds::Unknown> }), drop_glue: None, drop_impl: VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 253 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } } }
note: run with `RUST_BACKTRACE=1` environment variable to display a backtrace
error: Thread panicked when extracting item `test_crate::gives_fn::{closure#0}`.
 --> tests/ui/simple/dyn-fn.rs:8:15
  |
8 |     takes_fn(&|counter| {
  |               ^^^^^^^^^


thread 'rustc' panicked at src/bin/charon-driver/translate/translate_functions.rs:62:18:
Unexpected definition for function: FullDef { this: ItemRef { contents: Node { id: Id { id: 270 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [Type(Ty { kind: Node { id: Id { id: 266 }, value: Param(ParamTy { index: 0, name: "<closure_kind>" }) } }), Type(Ty { kind: Node { id: Id { id: 267 }, value: Param(ParamTy { index: 1, name: "<closure_signature>" }) } }), Type(Ty { kind: Node { id: Id { id: 268 }, value: Param(ParamTy { index: 2, name: "<upvars>" }) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, span: Span { lo: Loc { line: 8, col: 14 }, hi: Loc { line: 8, col: 23 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(tests/ui/simple/dyn-fn.rs:8:15: 8:24 (#0)) }, source_span: Some(Span { lo: Loc { line: 8, col: 14 }, hi: Loc { line: 11, col: 5 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(tests/ui/simple/dyn-fn.rs:8:15: 11:6 (#0)) }), source_text: Some("|counter| {\n        *counter += 1;\n        true\n    }"), attributes: [], visibility: None, lang_item: None, diagnostic_item: None, kind: Closure { args: ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 235 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Named(core::ops::function::Fn::call::'_, "'_") }) }, Ty { kind: Node { id: Id { id: 234 }, value: Dynamic(ParamTy { index: 4, name: "_dyn" }, GenericPredicates { predicates: [(Clause { kind: Binder { value: Trait(TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }), bound_vars: [] }, id: PredicateId(7174807728199507765) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) }), (Clause { kind: Binder { value: Projection(ProjectionPredicate { impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(7174807728199507765), index: 0, trait: Binder { value: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, path: [Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 232 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(1901191129474274469), index: 1 }, Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(14737305105355114170), index: 1 }] } }, assoc_item: AssocItem { def_id: core::ops::function::FnOnce::Output, name: Some("Output"), kind: Type { data: Normal("Output") }, container: TraitContainer { trait_ref: ItemRef { contents: Node { id: Id { id: 27 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 25 }, value: Param(ParamTy { index: 0, name: "Self" }) } }), Type(Ty { kind: Node { id: Id { id: 26 }, value: Param(ParamTy { index: 1, name: "Args" }) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } } }, has_value: false }, ty: Ty { kind: Node { id: Id { id: 233 }, value: Bool } } }), bound_vars: [] }, id: PredicateId(403815367319714153) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) })] }, Region { kind: ReErased }) } }, false) } }, Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Named(core::ops::function::Fn::call::'_, "'_"))] }, upvar_tys: [] }, is_const: false, vtable_sig: Some(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 235 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Named(core::ops::function::Fn::call::'_, "'_") }) }, Ty { kind: Node { id: Id { id: 234 }, value: Dynamic(ParamTy { index: 4, name: "_dyn" }, GenericPredicates { predicates: [(Clause { kind: Binder { value: Trait(TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }), bound_vars: [] }, id: PredicateId(7174807728199507765) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) }), (Clause { kind: Binder { value: Projection(ProjectionPredicate { impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, impl: LocalBound { predicate_id: PredicateId(7174807728199507765), index: 0, trait: Binder { value: ItemRef { contents: Node { id: Id { id: 230 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, bound_vars: [] }, path: [Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 232 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(1901191129474274469), index: 1 }, Parent { predicate: Binder { value: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 231 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 226 }, value: Param(ParamTy { index: 4, name: "_dyn" }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } }, is_positive: true }, bound_vars: [] }, predicate_id: PredicateId(14737305105355114170), index: 1 }] } }, assoc_item: AssocItem { def_id: core::ops::function::FnOnce::Output, name: Some("Output"), kind: Type { data: Normal("Output") }, container: TraitContainer { trait_ref: ItemRef { contents: Node { id: Id { id: 27 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 25 }, value: Param(ParamTy { index: 0, name: "Self" }) } }), Type(Ty { kind: Node { id: Id { id: 26 }, value: Param(ParamTy { index: 1, name: "Args" }) } })], impl_exprs: [], in_trait: None, has_param: true, has_non_lt_param: true } } } }, has_value: false }, ty: Ty { kind: Node { id: Id { id: 233 }, value: Bool } } }), bound_vars: [] }, id: PredicateId(403815367319714153) }, Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) })] }, Region { kind: ReErased }) } }, false) } }, Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Named(core::ops::function::Fn::call::'_, "'_"))] }), fn_once_impl: VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(Ty { kind: Node { id: Id { id: 238 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 264 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] }, fn_mut_impl: Some(VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 241 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(core::ops::function::FnOnce::Output, Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 247 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 238 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] }), fn_impl: Some(VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 265 }, value: ItemRefContents { def_id: core::ops::function::Fn, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 241 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(core::ops::function::FnOnce::Output, Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 247 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 238 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] }), once_shim: Some(MirBody { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, local_decls: IndexVec { raw: [LocalDecl { mutability: true, ty: Ty { kind: Node { id: Id { id: 238 }, value: Bool } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }, LocalDecl { mutability: false, ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }, LocalDecl { mutability: false, ty: Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }, LocalDecl { mutability: false, ty: Ty { kind: Node { id: Id { id: 240 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, true) } }, source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, name: None }], _marker: PhantomData<fn(&hax_frontend_exporter::types::mir::Local)> }, arg_count: 2, basic_blocks: IndexVec { raw: [BasicBlockData { statements: [Statement { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Assign((Place { ty: Ty { kind: Node { id: Id { id: 240 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, true) } }, kind: Local(Local(3)) }, Ref(Region { kind: ReErased }, Mut { kind: Default }, Place { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, kind: Local(Local(1)) }))) }], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Call { fun: Static(ItemRef { contents: Node { id: Id { id: 249 }, value: ItemRefContents { def_id: core::ops::function::FnMut::call_mut, generic_args: [], impl_exprs: [], in_trait: Some(ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 241 }, value: ItemRefContents { def_id: core::ops::function::FnMut, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 243 }, value: ItemRefContents { def_id: core::ops::function::FnOnce, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }), Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [(core::ops::function::FnOnce::Output, Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 247 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 238 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 248 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 233 }, value: Bool } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }])] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 244 }, value: ItemRefContents { def_id: core::marker::Sized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 246 }, value: ItemRefContents { def_id: core::marker::Tuple, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 245 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }], types: [] } }), has_param: false, has_non_lt_param: false } } }), late_bound_generics: [Lifetime(Region { kind: ReErased })], args: [Spanned { node: Move(Place { ty: Ty { kind: Node { id: Id { id: 240 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, true) } }, kind: Local(Local(3)) }), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) } }, Spanned { node: Move(Place { ty: Ty { kind: Node { id: Id { id: 229 }, value: Tuple([Ty { kind: Node { id: Id { id: 228 }, value: Ref(Region { kind: ReErased }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }, kind: Local(Local(2)) }), span: Span { lo: Loc { line: 1, col: 0 }, hi: Loc { line: 1, col: 0 }, filename: Real(LocalPath("tests/ui/simple/dyn-fn.rs")), rust_span_data: Some(no-location (#0)) } }], destination: Place { ty: Ty { kind: Node { id: Id { id: 238 }, value: Bool } }, kind: Local(Local(0)) }, target: Some(BasicBlock(1)), unwind: Cleanup(BasicBlock(3)), fn_span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) } } }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Drop { place: Place { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, kind: Local(Local(1)) }, impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 253 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 255 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 256 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 259 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 260 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 262 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } }, impl_exprs: [] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 263 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, target: BasicBlock(2), unwind: Continue } }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Return }), is_cleanup: false }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: Drop { place: Place { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, kind: Local(Local(1)) }, impl_expr: ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 253 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } }, impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 255 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 256 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 254 }, value: Int(I8) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 259 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Noop), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 260 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 258 }, value: Arrow(Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 257 }, value: Tuple([Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }]) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Other("RustCall") }, bound_vars: [Region(Anon)] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 262 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Drop(Glue { ty: Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } }, impl_exprs: [] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 263 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 261 }, value: Tuple([]) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }] }), impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } }, target: BasicBlock(4), unwind: Terminate(UnwindTerminateReason { todo: "InCleanup" }) } }), is_cleanup: true }, BasicBlockData { statements: [], terminator: Some(Terminator { source_info: SourceInfo { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, scope: SourceScope(0) }, kind: UnwindResume }), is_cleanup: true }], _marker: PhantomData<fn(&hax_frontend_exporter::types::mir::BasicBlock)> }, source_scopes: IndexVec { raw: [SourceScopeData { span: Span { lo: Loc { line: 253, col: 4 }, hi: Loc { line: 253, col: 70 }, filename: Real(LocalPath("/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs")), rust_span_data: Some(/home/runner/.rustup/toolchains/nightly-2025-07-20-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/library/core/src/ops/function.rs:253:5: 253:71 (#0)) }, parent_scope: None, inlined_parent_scope: None }], _marker: PhantomData<fn(&hax_frontend_exporter::types::mir::SourceScope)> }, tainted_by_errors: None, _kind: PhantomData<hax_frontend_exporter::types::mir::mir_kinds::Unknown> }), drop_glue: None, drop_impl: VirtualTraitImpl { trait_pred: TraitPredicate { trait_ref: ItemRef { contents: Node { id: Id { id: 253 }, value: ItemRefContents { def_id: core::ops::drop::Drop, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, is_positive: true }, implied_impl_exprs: [ImplExpr { trait: Binder { value: ItemRef { contents: Node { id: Id { id: 242 }, value: ItemRefContents { def_id: core::marker::MetaSized, generic_args: [Type(Ty { kind: Node { id: Id { id: 239 }, value: Closure(ClosureArgs { item: ItemRef { contents: Node { id: Id { id: 236 }, value: ItemRefContents { def_id: test_crate::gives_fn::{closure#0}, generic_args: [], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, kind: Fn, fn_sig: Binder { value: TyFnSig { inputs: [Ty { kind: Node { id: Id { id: 237 }, value: Ref(Region { kind: ReBound(0, BoundRegion { var: 0, kind: Anon }) }, Ty { kind: Node { id: Id { id: 227 }, value: Uint(U32) } }, true) } }], output: Ty { kind: Node { id: Id { id: 233 }, value: Bool } }, c_variadic: false, safety: Safe, abi: Rust }, bound_vars: [Region(Anon)] }, upvar_tys: [] }) } })], impl_exprs: [], in_trait: None, has_param: false, has_non_lt_param: false } } }, bound_vars: [] }, impl: Builtin { trait_data: Other, impl_exprs: [], types: [] } }], types: [] } } }
error: Thread panicked when extracting item `test_crate::gives_fn::{closure#0}`.
 --> tests/ui/simple/dyn-fn.rs:8:15
  |
8 |     takes_fn(&|counter| {
  |               ^^^^^^^^^

ERROR Charon failed to translate this code (2 errors)
