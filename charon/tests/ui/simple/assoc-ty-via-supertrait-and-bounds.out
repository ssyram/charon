# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: test_crate::HasOutput
pub trait HasOutput<Self, Self_Output>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Self_Output>
    vtable: test_crate::HasOutput::{vtable}<Self_Output>
}

// Full name: test_crate::{impl HasOutput<()> for ()}
impl HasOutput<()> for () {
    parent_clause0 = MetaSized<()>
    parent_clause1 = Sized<()>
    vtable: {impl HasOutput<()> for ()}::{vtable}
}

// Full name: test_crate::HasOutput2
pub trait HasOutput2<Self, Self_Clause1_Output>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: HasOutput<Self, Self_Clause1_Output>
    vtable: test_crate::HasOutput2::{vtable}<Self_Clause1_Output>
}

// Full name: test_crate::{impl HasOutput2<()> for ()}
impl HasOutput2<()> for () {
    parent_clause0 = MetaSized<()>
    parent_clause1 = {impl HasOutput<()> for ()}
    vtable: {impl HasOutput2<()> for ()}::{vtable}
}

// Full name: test_crate::Wrapper
struct Wrapper<T>
where
    [@TraitClause0]: Sized<T>,
{
  T,
}

// Full name: test_crate::{impl HasOutput<missing(@Type0_1)> for alloc::boxed::Box<T>}
impl<T> HasOutput<missing(@Type0_1)> for alloc::boxed::Box<T> {
    parent_clause0 = MetaSized<alloc::boxed::Box<T>>
    parent_clause1 = missing(@TraitClause0_1)::parent_clause1
    vtable: {impl HasOutput<missing(@Type0_1)> for alloc::boxed::Box<T>}::{vtable}<T>[missing(@TraitClause0_0), missing(@TraitClause0_1)]
}

// Full name: test_crate::{impl HasOutput2<missing(@Type0_1)> for alloc::boxed::Box<T>}
impl<T> HasOutput2<missing(@Type0_1)> for alloc::boxed::Box<T> {
    parent_clause0 = MetaSized<alloc::boxed::Box<T>>
    parent_clause1 = {impl HasOutput<missing(@Type0_1)> for alloc::boxed::Box<T>}<T, missing(@Type0_1)>
    vtable: {impl HasOutput2<missing(@Type0_1)> for alloc::boxed::Box<T>}::{vtable}<T>[missing(@TraitClause0_0), missing(@TraitClause0_1)]
}

// Full name: test_crate::take
fn take<T, Clause1_Clause1_Output>()
where
    [@TraitClause0]: Sized<T>,
    [@TraitClause1]: HasOutput2<T, Clause1_Clause1_Output>,
{
    let @0: (); // return

    @0 := ()
    @0 := ()
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return

    @0 := take<Wrapper<()>[Sized<()>], ()>[Sized<Wrapper<()>[Sized<()>]>, {impl HasOutput2<missing(@Type0_1)> for alloc::boxed::Box<T>}<(), ()>]()
    @0 := ()
    return
}



