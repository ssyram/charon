# Final LLBC before serialization:

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::convert::From
#[lang_item("From")]
pub trait From<Self, T>
{
    parent_clause0 : [@TraitClause0]: Sized<Self>
    parent_clause1 : [@TraitClause1]: Sized<T>
    fn from = core::convert::From::from<Self, T>[Self]
    non-dyn-compatible
}

#[lang_item("from_fn")]
pub fn core::convert::From::from<Self, T>(@1: T) -> Self
where
    [@TraitClause0]: From<Self, T>,

// Full name: core::marker::Tuple
#[lang_item("tuple_trait")]
pub trait Tuple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    vtable: core::marker::Tuple::{vtable}
}

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::ops::function::FnOnce
#[lang_item("fn_once")]
pub trait FnOnce<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: Sized<Args>
    parent_clause2 : [@TraitClause2]: Tuple<Args>
    parent_clause3 : [@TraitClause3]: Sized<Self::Output>
    type Output
    fn call_once = core::ops::function::FnOnce::call_once<Self, Args>[Self]
    vtable: core::ops::function::FnOnce::{vtable}<Args, Self::Output>
}

struct core::ops::function::FnOnce::{vtable}<Args, Ty0> {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, Args> + _dyn : '_ + @TraitClause1_0::Output = Ty0)),
  method_call_once: fn((dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, Args> + _dyn : '_ + @TraitClause1_0::Output = Ty0), Args) -> FnOnce<(dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, Args> + _dyn : '_ + @TraitClause1_0::Output = Ty0), Args>::Output,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
}

// Full name: core::ops::function::FnMut
#[lang_item("fn_mut")]
pub trait FnMut<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnOnce<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call_mut<'_0> = core::ops::function::FnMut::call_mut<'_0_0, Self, Args>[Self]
    vtable: core::ops::function::FnMut::{vtable}<Args, Self::parent_clause1::Output>
}

struct core::ops::function::FnMut::{vtable}<Args, Ty0> {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = Ty0)),
  method_call_mut: fn<'_0>(&'_0_0 mut ((dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = Ty0)), Args) -> FnMut<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = Ty0), Args>::parent_clause1::Output,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
  super_trait_1: &'static (core::ops::function::FnOnce::{vtable}<Args, FnMut<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = Ty0), Args>::parent_clause1::Output>),
}

struct core::ops::function::Fn::{vtable}<Args, Ty0> {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0)),
  method_call: fn<'_0>(&'_0_0 ((dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0)), Args) -> Fn<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0), Args>::parent_clause1::parent_clause1::Output,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
  super_trait_1: &'static (core::ops::function::FnMut::{vtable}<Args, Fn<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, Args> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = Ty0), Args>::parent_clause1::parent_clause1::Output>),
}

// Full name: core::ops::function::Fn
#[lang_item("r#fn")]
pub trait Fn<Self, Args>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    parent_clause1 : [@TraitClause1]: FnMut<Self, Args>
    parent_clause2 : [@TraitClause2]: Sized<Args>
    parent_clause3 : [@TraitClause3]: Tuple<Args>
    fn call<'_0> = core::ops::function::Fn::call<'_0_0, Self, Args>[Self]
    vtable: core::ops::function::Fn::{vtable}<Args, Self::parent_clause1::parent_clause1::Output>
}

pub fn core::ops::function::Fn::call<'_0, Self, Args>(@1: &'_0 (Self), @2: Args) -> @TraitClause0::parent_clause1::parent_clause1::Output
where
    [@TraitClause0]: Fn<Self, Args>,

pub fn core::ops::function::FnMut::call_mut<'_0, Self, Args>(@1: &'_0 mut (Self), @2: Args) -> @TraitClause0::parent_clause1::Output
where
    [@TraitClause0]: FnMut<Self, Args>,

pub fn core::ops::function::FnOnce::call_once<Self, Args>(@1: Self, @2: Args) -> @TraitClause0::Output
where
    [@TraitClause0]: FnOnce<Self, Args>,

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::boxed::{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop
pub fn {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop<'_0, T, A>(@1: &'_0 mut (alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]))
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: alloc::boxed::{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}
impl<T, A> Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,
{
    parent_clause0 = MetaSized<alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]>
    fn drop<'_0> = {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::drop<'_0_0, T, A>[@TraitClause0, @TraitClause1]
    vtable: {impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}::{vtable}<T, A>[@TraitClause0, @TraitClause1]
}

// Full name: alloc::string::String
#[lang_item("String")]
pub opaque type String

// Full name: alloc::string::String::{impl Drop for String}::drop
fn {impl Drop for String}::drop<'_0>(@1: &'_0 mut (String))

// Full name: alloc::string::String::{impl Drop for String}
impl Drop for String {
    parent_clause0 = MetaSized<String>
    fn drop<'_0> = {impl Drop for String}::drop<'_0_0>
    non-dyn-compatible
}

// Full name: alloc::string::{impl From<&'_0 (Str)> for String}::from
pub fn {impl From<&'_0 (Str)> for String}::from<'_0>(@1: &'_0 (Str)) -> String

// Full name: alloc::string::{impl From<&'_0 (Str)> for String}
impl<'_0> From<&'_0 (Str)> for String {
    parent_clause0 = Sized<String>
    parent_clause1 = Sized<&'_ (Str)>
    fn from = {impl From<&'_0 (Str)> for String}::from<'_0>
    non-dyn-compatible
}

struct test_crate::test_basic_closure_trait_object::closure {
  i32,
}

// Full name: test_crate::test_basic_closure_trait_object::{impl Fn<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call
fn {impl Fn<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call<'_0>(@1: &'_0 (test_crate::test_basic_closure_trait_object::closure), @2: (i32)) -> i32
{
    let @0: i32; // return
    let @1: &'_ (test_crate::test_basic_closure_trait_object::closure); // arg #1
    let tupled_args@2: (i32); // arg #2
    let y@3: i32; // local
    let @4: i32; // anonymous local
    let @5: i32; // anonymous local
    let @6: i32; // anonymous local

    storage_live(y@3)
    storage_live(@6)
    y@3 := move ((tupled_args@2).0)
    storage_live(@4)
    @4 := copy ((*(@1)).0)
    storage_live(@5)
    @5 := copy (y@3)
    @6 := copy (@4) panic.+ copy (@5)
    @0 := move (@6)
    storage_dead(@5)
    storage_dead(@4)
    return
}

// Full name: test_crate::test_basic_closure_trait_object::{impl FnMut<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call_mut
fn {impl FnMut<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call_mut<'_0>(@1: &'_0 mut (test_crate::test_basic_closure_trait_object::closure), @2: (i32)) -> i32
{
    let @0: i32; // return
    let state@1: &'_0 mut (test_crate::test_basic_closure_trait_object::closure); // arg #1
    let args@2: (i32); // arg #2
    let @3: &'_ (test_crate::test_basic_closure_trait_object::closure); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := {impl Fn<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call<'_>(move (@3), move (args@2))
    return
}

// Full name: test_crate::test_basic_closure_trait_object::{impl FnOnce<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call_once
fn {impl FnOnce<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call_once(@1: test_crate::test_basic_closure_trait_object::closure, @2: (i32)) -> i32
{
    let @0: i32; // return
    let @1: test_crate::test_basic_closure_trait_object::closure; // arg #1
    let @2: (i32); // arg #2
    let @3: &'_ mut (test_crate::test_basic_closure_trait_object::closure); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := {impl FnMut<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call_mut<'_>(move (@3), move (@2))
    drop[Drop<test_crate::test_basic_closure_trait_object::closure>] @1
    return
}

// Full name: test_crate::test_basic_closure_trait_object::{impl FnOnce<(i32)> for test_crate::test_basic_closure_trait_object::closure}
impl FnOnce<(i32)> for test_crate::test_basic_closure_trait_object::closure {
    parent_clause0 = MetaSized<test_crate::test_basic_closure_trait_object::closure>
    parent_clause1 = Sized<(i32)>
    parent_clause2 = Tuple<(i32)>
    parent_clause3 = Sized<i32>
    type Output = i32
    fn call_once = {impl FnOnce<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call_once
    non-dyn-compatible
}

// Full name: test_crate::test_basic_closure_trait_object::{impl FnMut<(i32)> for test_crate::test_basic_closure_trait_object::closure}
impl FnMut<(i32)> for test_crate::test_basic_closure_trait_object::closure {
    parent_clause0 = MetaSized<test_crate::test_basic_closure_trait_object::closure>
    parent_clause1 = {impl FnOnce<(i32)> for test_crate::test_basic_closure_trait_object::closure}
    parent_clause2 = Sized<(i32)>
    parent_clause3 = Tuple<(i32)>
    fn call_mut<'_0> = {impl FnMut<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call_mut<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::test_basic_closure_trait_object::{impl Fn<(i32)> for test_crate::test_basic_closure_trait_object::closure}
impl Fn<(i32)> for test_crate::test_basic_closure_trait_object::closure {
    parent_clause0 = MetaSized<test_crate::test_basic_closure_trait_object::closure>
    parent_clause1 = {impl FnMut<(i32)> for test_crate::test_basic_closure_trait_object::closure}
    parent_clause2 = Sized<(i32)>
    parent_clause3 = Tuple<(i32)>
    fn call<'_0> = {impl Fn<(i32)> for test_crate::test_basic_closure_trait_object::closure}::call<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::test_basic_closure_trait_object
fn test_basic_closure_trait_object()
{
    let @0: (); // return
    let x@1: i32; // local
    let closure@2: test_crate::test_basic_closure_trait_object::closure; // local
    let _fn_obj@3: alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)>, Sized<Global>]; // local
    let @4: alloc::boxed::Box<test_crate::test_basic_closure_trait_object::closure>[MetaSized<test_crate::test_basic_closure_trait_object::closure>, Sized<Global>]; // anonymous local
    let @5: test_crate::test_basic_closure_trait_object::closure; // anonymous local

    storage_live(x@1)
    x@1 := const (42 : i32)
    storage_live(closure@2)
    closure@2 := test_crate::test_basic_closure_trait_object::closure { 0: copy (x@1) }
    storage_live(_fn_obj@3)
    storage_live(@4)
    storage_live(@5)
    // Create a trait object - this should trigger vtable instance creation
    @5 := copy (closure@2)
    @4 := @BoxNew<test_crate::test_basic_closure_trait_object::closure>[Sized<test_crate::test_basic_closure_trait_object::closure>](move (@5))
    _fn_obj@3 := unsize_cast<alloc::boxed::Box<test_crate::test_basic_closure_trait_object::closure>[MetaSized<test_crate::test_basic_closure_trait_object::closure>, Sized<Global>], alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)>, Sized<Global>], {impl Fn<(i32)> for test_crate::test_basic_closure_trait_object::closure}>(move (@4))
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<test_crate::test_basic_closure_trait_object::closure, Global>[MetaSized<test_crate::test_basic_closure_trait_object::closure>, Sized<Global>]] @4
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Fn<_dyn, (i32)> + _dyn : '_ + @TraitClause1_0::parent_clause1::parent_clause1::Output = i32)>, Sized<Global>]] _fn_obj@3
    storage_dead(_fn_obj@3)
    storage_dead(closure@2)
    storage_dead(x@1)
    @0 := ()
    return
}

struct test_crate::test_closure_fnonce_trait_object::closure {
  String,
}

// Full name: test_crate::test_closure_fnonce_trait_object::{impl FnOnce<()> for test_crate::test_closure_fnonce_trait_object::closure}::call_once
fn {impl FnOnce<()> for test_crate::test_closure_fnonce_trait_object::closure}::call_once(@1: test_crate::test_closure_fnonce_trait_object::closure, @2: ()) -> String
{
    let @0: String; // return
    let @1: test_crate::test_closure_fnonce_trait_object::closure; // arg #1
    let tupled_args@2: (); // arg #2

    @0 := move ((@1).0)
    drop[Drop<test_crate::test_closure_fnonce_trait_object::closure>] @1
    return
}

// Full name: test_crate::test_closure_fnonce_trait_object::{impl FnOnce<()> for test_crate::test_closure_fnonce_trait_object::closure}
impl FnOnce<()> for test_crate::test_closure_fnonce_trait_object::closure {
    parent_clause0 = MetaSized<test_crate::test_closure_fnonce_trait_object::closure>
    parent_clause1 = Sized<()>
    parent_clause2 = Tuple<()>
    parent_clause3 = Sized<String>
    type Output = String
    fn call_once = {impl FnOnce<()> for test_crate::test_closure_fnonce_trait_object::closure}::call_once
    non-dyn-compatible
}

// Full name: test_crate::test_closure_fnonce_trait_object
fn test_closure_fnonce_trait_object()
{
    let @0: (); // return
    let s@1: String; // local
    let closure@2: test_crate::test_closure_fnonce_trait_object::closure; // local
    let _fn_once_obj@3: alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, ()> + _dyn : '_ + @TraitClause1_0::Output = String)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, ()> + _dyn : '_ + @TraitClause1_0::Output = String)>, Sized<Global>]; // local
    let @4: alloc::boxed::Box<test_crate::test_closure_fnonce_trait_object::closure>[MetaSized<test_crate::test_closure_fnonce_trait_object::closure>, Sized<Global>]; // anonymous local
    let @5: test_crate::test_closure_fnonce_trait_object::closure; // anonymous local

    storage_live(s@1)
    s@1 := {impl From<&'_0 (Str)> for String}::from<'_>(const ("hello"))
    storage_live(closure@2)
    closure@2 := test_crate::test_closure_fnonce_trait_object::closure { 0: move (s@1) }
    storage_live(_fn_once_obj@3)
    storage_live(@4)
    storage_live(@5)
    // FnOnce trait object
    @5 := move (closure@2)
    @4 := @BoxNew<test_crate::test_closure_fnonce_trait_object::closure>[Sized<test_crate::test_closure_fnonce_trait_object::closure>](move (@5))
    _fn_once_obj@3 := unsize_cast<alloc::boxed::Box<test_crate::test_closure_fnonce_trait_object::closure>[MetaSized<test_crate::test_closure_fnonce_trait_object::closure>, Sized<Global>], alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, ()> + _dyn : '_ + @TraitClause1_0::Output = String)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, ()> + _dyn : '_ + @TraitClause1_0::Output = String)>, Sized<Global>], {impl FnOnce<()> for test_crate::test_closure_fnonce_trait_object::closure}>(move (@4))
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<test_crate::test_closure_fnonce_trait_object::closure, Global>[MetaSized<test_crate::test_closure_fnonce_trait_object::closure>, Sized<Global>]] @4
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, ()> + _dyn : '_ + @TraitClause1_0::Output = String), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: FnOnce<_dyn, ()> + _dyn : '_ + @TraitClause1_0::Output = String)>, Sized<Global>]] _fn_once_obj@3
    storage_dead(_fn_once_obj@3)
    drop[Drop<test_crate::test_closure_fnonce_trait_object::closure>] closure@2
    storage_dead(closure@2)
    drop[{impl Drop for String}] s@1
    storage_dead(s@1)
    @0 := ()
    return
}

struct test_crate::test_closure_fnmut_trait_object::closure {
  i32,
}

// Full name: test_crate::test_closure_fnmut_trait_object::{impl FnMut<()> for test_crate::test_closure_fnmut_trait_object::closure}::call_mut
fn {impl FnMut<()> for test_crate::test_closure_fnmut_trait_object::closure}::call_mut<'_0>(@1: &'_0 mut (test_crate::test_closure_fnmut_trait_object::closure), @2: ()) -> i32
{
    let @0: i32; // return
    let @1: &'_ mut (test_crate::test_closure_fnmut_trait_object::closure); // arg #1
    let tupled_args@2: (); // arg #2
    let @3: i32; // anonymous local

    storage_live(@3)
    @3 := copy ((*(@1)).0) panic.+ const (1 : i32)
    (*(@1)).0 := move (@3)
    @0 := copy ((*(@1)).0)
    return
}

// Full name: test_crate::test_closure_fnmut_trait_object::{impl FnOnce<()> for test_crate::test_closure_fnmut_trait_object::closure}::call_once
fn {impl FnOnce<()> for test_crate::test_closure_fnmut_trait_object::closure}::call_once(@1: test_crate::test_closure_fnmut_trait_object::closure, @2: ()) -> i32
{
    let @0: i32; // return
    let @1: test_crate::test_closure_fnmut_trait_object::closure; // arg #1
    let @2: (); // arg #2
    let @3: &'_ mut (test_crate::test_closure_fnmut_trait_object::closure); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := {impl FnMut<()> for test_crate::test_closure_fnmut_trait_object::closure}::call_mut<'_>(move (@3), move (@2))
    drop[Drop<test_crate::test_closure_fnmut_trait_object::closure>] @1
    return
}

// Full name: test_crate::test_closure_fnmut_trait_object::{impl FnOnce<()> for test_crate::test_closure_fnmut_trait_object::closure}
impl FnOnce<()> for test_crate::test_closure_fnmut_trait_object::closure {
    parent_clause0 = MetaSized<test_crate::test_closure_fnmut_trait_object::closure>
    parent_clause1 = Sized<()>
    parent_clause2 = Tuple<()>
    parent_clause3 = Sized<i32>
    type Output = i32
    fn call_once = {impl FnOnce<()> for test_crate::test_closure_fnmut_trait_object::closure}::call_once
    non-dyn-compatible
}

// Full name: test_crate::test_closure_fnmut_trait_object::{impl FnMut<()> for test_crate::test_closure_fnmut_trait_object::closure}
impl FnMut<()> for test_crate::test_closure_fnmut_trait_object::closure {
    parent_clause0 = MetaSized<test_crate::test_closure_fnmut_trait_object::closure>
    parent_clause1 = {impl FnOnce<()> for test_crate::test_closure_fnmut_trait_object::closure}
    parent_clause2 = Sized<()>
    parent_clause3 = Tuple<()>
    fn call_mut<'_0> = {impl FnMut<()> for test_crate::test_closure_fnmut_trait_object::closure}::call_mut<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::test_closure_fnmut_trait_object
fn test_closure_fnmut_trait_object()
{
    let @0: (); // return
    let counter@1: i32; // local
    let closure@2: test_crate::test_closure_fnmut_trait_object::closure; // local
    let _fn_mut_obj@3: alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, ()> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = i32)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, ()> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = i32)>, Sized<Global>]; // local
    let @4: alloc::boxed::Box<test_crate::test_closure_fnmut_trait_object::closure>[MetaSized<test_crate::test_closure_fnmut_trait_object::closure>, Sized<Global>]; // anonymous local
    let @5: test_crate::test_closure_fnmut_trait_object::closure; // anonymous local

    storage_live(counter@1)
    counter@1 := const (0 : i32)
    storage_live(closure@2)
    closure@2 := test_crate::test_closure_fnmut_trait_object::closure { 0: copy (counter@1) }
    storage_live(_fn_mut_obj@3)
    storage_live(@4)
    storage_live(@5)
    // FnMut trait object  
    @5 := copy (closure@2)
    @4 := @BoxNew<test_crate::test_closure_fnmut_trait_object::closure>[Sized<test_crate::test_closure_fnmut_trait_object::closure>](move (@5))
    _fn_mut_obj@3 := unsize_cast<alloc::boxed::Box<test_crate::test_closure_fnmut_trait_object::closure>[MetaSized<test_crate::test_closure_fnmut_trait_object::closure>, Sized<Global>], alloc::boxed::Box<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, ()> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = i32)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, ()> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = i32)>, Sized<Global>], {impl FnMut<()> for test_crate::test_closure_fnmut_trait_object::closure}>(move (@4))
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<test_crate::test_closure_fnmut_trait_object::closure, Global>[MetaSized<test_crate::test_closure_fnmut_trait_object::closure>, Sized<Global>]] @4
    storage_dead(@5)
    storage_dead(@4)
    @0 := ()
    drop[{impl Drop for alloc::boxed::Box<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, ()> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = i32), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: FnMut<_dyn, ()> + _dyn : '_ + @TraitClause1_0::parent_clause1::Output = i32)>, Sized<Global>]] _fn_mut_obj@3
    storage_dead(_fn_mut_obj@3)
    storage_dead(closure@2)
    storage_dead(counter@1)
    @0 := ()
    return
}

// Full name: test_crate::apply_fn
fn apply_fn<F>(@1: F) -> i32
where
    [@TraitClause0]: Sized<F>,
    [@TraitClause1]: Fn<F, ()>,
    @TraitClause1::parent_clause1::parent_clause1::Output = i32,
{
    let @0: i32; // return
    let f@1: F; // arg #1
    let @2: &'_ (F); // anonymous local
    let @3: (); // anonymous local

    storage_live(@2)
    @2 := &f@1
    storage_live(@3)
    @3 := ()
    @0 := @TraitClause1::call<'_>(move (@2), move (@3))
    storage_dead(@3)
    storage_dead(@2)
    drop[Drop<F>] f@1
    return
}

struct test_crate::test_higher_order_closure::closure {
  i32,
}

// Full name: test_crate::test_higher_order_closure::{impl Fn<()> for test_crate::test_higher_order_closure::closure}::call
fn {impl Fn<()> for test_crate::test_higher_order_closure::closure}::call<'_0>(@1: &'_0 (test_crate::test_higher_order_closure::closure), @2: ()) -> i32
{
    let @0: i32; // return
    let @1: &'_ (test_crate::test_higher_order_closure::closure); // arg #1
    let tupled_args@2: (); // arg #2

    @0 := copy ((*(@1)).0)
    return
}

// Full name: test_crate::test_higher_order_closure::{impl FnMut<()> for test_crate::test_higher_order_closure::closure}::call_mut
fn {impl FnMut<()> for test_crate::test_higher_order_closure::closure}::call_mut<'_0>(@1: &'_0 mut (test_crate::test_higher_order_closure::closure), @2: ()) -> i32
{
    let @0: i32; // return
    let state@1: &'_0 mut (test_crate::test_higher_order_closure::closure); // arg #1
    let args@2: (); // arg #2
    let @3: &'_ (test_crate::test_higher_order_closure::closure); // anonymous local

    storage_live(@3)
    @3 := &*(state@1)
    @0 := {impl Fn<()> for test_crate::test_higher_order_closure::closure}::call<'_>(move (@3), move (args@2))
    return
}

// Full name: test_crate::test_higher_order_closure::{impl FnOnce<()> for test_crate::test_higher_order_closure::closure}::call_once
fn {impl FnOnce<()> for test_crate::test_higher_order_closure::closure}::call_once(@1: test_crate::test_higher_order_closure::closure, @2: ()) -> i32
{
    let @0: i32; // return
    let @1: test_crate::test_higher_order_closure::closure; // arg #1
    let @2: (); // arg #2
    let @3: &'_ mut (test_crate::test_higher_order_closure::closure); // anonymous local

    storage_live(@3)
    @3 := &mut @1
    @0 := {impl FnMut<()> for test_crate::test_higher_order_closure::closure}::call_mut<'_>(move (@3), move (@2))
    drop[Drop<test_crate::test_higher_order_closure::closure>] @1
    return
}

// Full name: test_crate::test_higher_order_closure::{impl FnOnce<()> for test_crate::test_higher_order_closure::closure}
impl FnOnce<()> for test_crate::test_higher_order_closure::closure {
    parent_clause0 = MetaSized<test_crate::test_higher_order_closure::closure>
    parent_clause1 = Sized<()>
    parent_clause2 = Tuple<()>
    parent_clause3 = Sized<i32>
    type Output = i32
    fn call_once = {impl FnOnce<()> for test_crate::test_higher_order_closure::closure}::call_once
    non-dyn-compatible
}

// Full name: test_crate::test_higher_order_closure::{impl FnMut<()> for test_crate::test_higher_order_closure::closure}
impl FnMut<()> for test_crate::test_higher_order_closure::closure {
    parent_clause0 = MetaSized<test_crate::test_higher_order_closure::closure>
    parent_clause1 = {impl FnOnce<()> for test_crate::test_higher_order_closure::closure}
    parent_clause2 = Sized<()>
    parent_clause3 = Tuple<()>
    fn call_mut<'_0> = {impl FnMut<()> for test_crate::test_higher_order_closure::closure}::call_mut<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::test_higher_order_closure::{impl Fn<()> for test_crate::test_higher_order_closure::closure}
impl Fn<()> for test_crate::test_higher_order_closure::closure {
    parent_clause0 = MetaSized<test_crate::test_higher_order_closure::closure>
    parent_clause1 = {impl FnMut<()> for test_crate::test_higher_order_closure::closure}
    parent_clause2 = Sized<()>
    parent_clause3 = Tuple<()>
    fn call<'_0> = {impl Fn<()> for test_crate::test_higher_order_closure::closure}::call<'_0_0>
    non-dyn-compatible
}

// Full name: test_crate::test_higher_order_closure
fn test_higher_order_closure()
{
    let @0: (); // return
    let value@1: i32; // local
    let closure@2: test_crate::test_higher_order_closure::closure; // local
    let _result@3: i32; // local
    let @4: test_crate::test_higher_order_closure::closure; // anonymous local

    storage_live(value@1)
    value@1 := const (100 : i32)
    storage_live(closure@2)
    closure@2 := test_crate::test_higher_order_closure::closure { 0: copy (value@1) }
    storage_live(_result@3)
    storage_live(@4)
    // Pass closure directly
    @4 := copy (closure@2)
    _result@3 := apply_fn<test_crate::test_higher_order_closure::closure>[Sized<test_crate::test_higher_order_closure::closure>, {impl Fn<()> for test_crate::test_higher_order_closure::closure}](move (@4))
    storage_dead(@4)
    @0 := ()
    storage_dead(_result@3)
    storage_dead(closure@2)
    storage_dead(value@1)
    @0 := ()
    return
}



