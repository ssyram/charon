# Final LLBC before serialization:

// Full name: core::fmt::Arguments
#[lang_item("format_arguments")]
pub opaque type Arguments<'a>
where
    'a : 'a,

// Full name: core::marker::MetaSized
#[lang_item("meta_sized")]
pub trait MetaSized<Self>

// Full name: core::marker::Sized
#[lang_item("sized")]
pub trait Sized<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    non-dyn-compatible
}

// Full name: core::ops::deref::Deref
#[lang_item("deref")]
pub trait Deref<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self::Target>
    type Target
    fn deref<'_0> = core::ops::deref::Deref::deref<'_0_0, Self>[Self]
    vtable: core::ops::deref::Deref::{vtable}<Self::Target>
}

#[lang_item("deref_method")]
pub fn core::ops::deref::Deref::deref<'_0, Self>(@1: &'_0 (Self)) -> &'_0 (@TraitClause0::Target)
where
    [@TraitClause0]: Deref<Self>,

// Full name: core::ops::drop::Drop
#[lang_item("drop")]
pub trait Drop<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn drop<'_0> = core::ops::drop::Drop::drop<'_0_0, Self>[Self]
    vtable: core::ops::drop::Drop::{vtable}
}

pub fn core::ops::drop::Drop::drop<'_0, Self>(@1: &'_0 mut (Self))
where
    [@TraitClause0]: Drop<Self>,

// Full name: core::option::Option
#[lang_item("Option")]
pub enum Option<T>
where
    [@TraitClause0]: Sized<T>,
{
  None,
  Some(T),
}

// Full name: core::panicking::AssertKind
pub enum AssertKind {
  Eq,
  Ne,
  Match,
}

// Full name: core::pin::Pin
#[lang_item("pin")]
pub opaque type Pin<Ptr>
where
    [@TraitClause0]: Sized<Ptr>,

// Full name: core::pin::Pin::{impl Drop for Pin<Ptr>[@TraitClause0]}::drop
fn {impl Drop for Pin<Ptr>[@TraitClause0]}::drop<'_0, Ptr>(@1: &'_0 mut (Pin<Ptr>[@TraitClause0]))
where
    [@TraitClause0]: Sized<Ptr>,

// Full name: core::pin::Pin::{impl Drop for Pin<Ptr>[@TraitClause0]}
impl<Ptr> Drop for Pin<Ptr>[@TraitClause0]
where
    [@TraitClause0]: Sized<Ptr>,
{
    parent_clause0 = MetaSized<Pin<Ptr>[@TraitClause0]>
    fn drop<'_0> = {impl Drop for Pin<Ptr>[@TraitClause0]}::drop<'_0_0, Ptr>[@TraitClause0]
    non-dyn-compatible
}

// Full name: core::pin::{Pin<Ptr>[@TraitClause0]}::new_unchecked
#[lang_item("new_unchecked")]
pub unsafe fn new_unchecked<Ptr>(@1: Ptr) -> Pin<Ptr>[@TraitClause0]
where
    [@TraitClause0]: Sized<Ptr>,
    [@TraitClause1]: Deref<Ptr>,

// Full name: core::pin::{impl Deref for Pin<Ptr>[@TraitClause0]}::deref
pub fn {impl Deref for Pin<Ptr>[@TraitClause0]}::deref<'_0, Ptr>(@1: &'_0 (Pin<Ptr>[@TraitClause0])) -> &'_0 (@TraitClause1::Target)
where
    [@TraitClause0]: Sized<Ptr>,
    [@TraitClause1]: Deref<Ptr>,

// Full name: core::pin::{impl Deref for Pin<Ptr>[@TraitClause0]}
impl<Ptr> Deref for Pin<Ptr>[@TraitClause0]
where
    [@TraitClause0]: Sized<Ptr>,
    [@TraitClause1]: Deref<Ptr>,
{
    parent_clause0 = @TraitClause1::parent_clause0
    type Target = @TraitClause1::Target
    fn deref<'_0> = {impl Deref for Pin<Ptr>[@TraitClause0]}::deref<'_0_0, Ptr>[@TraitClause0, @TraitClause1]
    vtable: {impl Deref for Pin<Ptr>[@TraitClause0]}::{vtable}<Ptr>[@TraitClause0, @TraitClause1]
}

// Full name: alloc::alloc::Global
#[lang_item("global_alloc_ty")]
pub struct Global {}

// Full name: alloc::rc::Rc
#[lang_item("Rc")]
pub opaque type Rc<T>
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<type_error("removed allocator parameter")>,

// Full name: alloc::rc::{Rc<T>[@TraitClause0::parent_clause0, Sized<Global>]}::new
pub fn new<T>(@1: T) -> Rc<T>[@TraitClause0::parent_clause0, Sized<Global>]
where
    [@TraitClause0]: Sized<T>,

// Full name: alloc::rc::{impl Deref for Rc<T>[@TraitClause0, @TraitClause1]}::deref
pub fn {impl Deref for Rc<T>[@TraitClause0, @TraitClause1]}::deref<'_0, T, A>(@1: &'_0 (Rc<T>[@TraitClause0, @TraitClause1])) -> &'_0 (T)
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: alloc::rc::{impl Deref for Rc<T>[@TraitClause0, @TraitClause1]}
impl<T, A> Deref for Rc<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,
{
    parent_clause0 = @TraitClause0
    type Target = T
    fn deref<'_0> = {impl Deref for Rc<T>[@TraitClause0, @TraitClause1]}::deref<'_0_0, T, A>[@TraitClause0, @TraitClause1]
    vtable: {impl Deref for Rc<T>[@TraitClause0, @TraitClause1]}::{vtable}<T, A>[@TraitClause0, @TraitClause1]
}

// Full name: alloc::rc::{impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}::drop
pub fn {impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}::drop<'_0, T, A>(@1: &'_0 mut (Rc<T>[@TraitClause0, @TraitClause1]))
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,

// Full name: alloc::rc::{impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}
impl<T, A> Drop for Rc<T>[@TraitClause0, @TraitClause1]
where
    [@TraitClause0]: MetaSized<T>,
    [@TraitClause1]: Sized<A>,
{
    parent_clause0 = MetaSized<Rc<T>[@TraitClause0, @TraitClause1]>
    fn drop<'_0> = {impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}::drop<'_0_0, T, A>[@TraitClause0, @TraitClause1]
    vtable: {impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}::{vtable}<T, A>[@TraitClause0, @TraitClause1]
}

struct test_crate::Simple::{vtable} {
  size: usize,
  align: usize,
  drop: fn(*mut (dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)),
  method_value: fn<'_0>(&'_0_0 ((dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_))) -> i32,
  super_trait_0: &'static (core::marker::MetaSized::{vtable}),
}

// Full name: test_crate::Simple
trait Simple<Self>
{
    parent_clause0 : [@TraitClause0]: MetaSized<Self>
    fn value<'_0> = test_crate::Simple::value<'_0_0, Self>[Self]
    vtable: test_crate::Simple::{vtable}
}

fn test_crate::Simple::value<'_0, Self>(@1: &'_0 (Self)) -> i32
where
    [@TraitClause0]: Simple<Self>,

// Full name: test_crate::{impl Simple for i32}::value
fn {impl Simple for i32}::value<'_0>(@1: &'_0 (i32)) -> i32
{
    let @0: i32; // return
    let self@1: &'_ (i32); // arg #1

    @0 := copy (*(self@1))
    return
}

// Full name: test_crate::{impl Simple for i32}
impl Simple for i32 {
    parent_clause0 = MetaSized<i32>
    fn value<'_0> = {impl Simple for i32}::value<'_0_0>
    vtable: {impl Simple for i32}::{vtable}
}

// Full name: test_crate::test_pin_simple
fn test_pin_simple()
{
    let @0: (); // return
    let val@1: Rc<i32>[MetaSized<i32>, Sized<Global>]; // local
    let trait_obj@2: Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]; // local
    let @3: Rc<i32>[MetaSized<i32>, Sized<Global>]; // anonymous local
    let pinned@4: Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]; // local
    let @5: Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]; // anonymous local
    let @6: Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]; // anonymous local
    let @7: Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]; // anonymous local
    let @8: Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]; // anonymous local
    let result@9: i32; // local
    let @10: &'_ ((dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)); // anonymous local
    let @11: &'_ ((dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)); // anonymous local
    let @12: &'_ (Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]); // anonymous local
    let @13: (); // anonymous local
    let @14: (&'_ (i32), &'_ (i32)); // anonymous local
    let @15: &'_ (i32); // anonymous local
    let @16: &'_ (i32); // anonymous local
    let @17: i32; // anonymous local
    let left_val@18: &'_ (i32); // local
    let right_val@19: &'_ (i32); // local
    let @20: bool; // anonymous local
    let @21: i32; // anonymous local
    let @22: i32; // anonymous local
    let kind@23: AssertKind; // local
    let @24: AssertKind; // anonymous local
    let @25: &'_ (i32); // anonymous local
    let @26: &'_ (i32); // anonymous local
    let @27: &'_ (i32); // anonymous local
    let @28: &'_ (i32); // anonymous local
    let @29: Option<Arguments<'_>>[Sized<Arguments<'_>>]; // anonymous local

    storage_live(kind@23)
    storage_live(@24)
    storage_live(@25)
    storage_live(@26)
    storage_live(@27)
    storage_live(@28)
    storage_live(@29)
    storage_live(val@1)
    // Test Pin<Rc<dyn Simple>>
    val@1 := new<i32>[Sized<i32>](const (42 : i32))
    storage_live(trait_obj@2)
    storage_live(@3)
    @3 := move (val@1)
    trait_obj@2 := unsize_cast<Rc<i32>[MetaSized<i32>, Sized<Global>], Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>(move (@3))
    drop[{impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}<i32, Global>[MetaSized<i32>, Sized<Global>]] @3
    storage_dead(@3)
    storage_live(pinned@4)
    storage_live(@5)
    storage_live(@6)
    storage_live(@7)
    storage_live(@8)
    @8 := move (trait_obj@2)
    @7 := unsize_cast<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>], Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>(move (@8))
    drop[{impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]] @8
    storage_dead(@8)
    @6 := new_unchecked<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>, {impl Deref for Rc<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]](move (@7))
    @5 := unsize_cast<Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>], Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]>(move (@6))
    drop[{impl Drop for Pin<Ptr>[@TraitClause0]}<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]] @6
    storage_dead(@7)
    storage_dead(@6)
    pinned@4 := unsize_cast<Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>], Pin<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]>(move (@5))
    drop[{impl Drop for Pin<Ptr>[@TraitClause0]}<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]] @5
    storage_dead(@5)
    storage_live(result@9)
    storage_live(@10)
    storage_live(@11)
    storage_live(@12)
    @12 := &pinned@4
    @11 := {impl Deref for Pin<Ptr>[@TraitClause0]}::deref<'_, Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>, {impl Deref for Rc<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]](move (@12))
    @10 := &*(@11)
    storage_dead(@12)
    result@9 := Simple<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>::value<'_>(move (@10))
    storage_dead(@10)
    storage_dead(@11)
    storage_live(@13)
    storage_live(@14)
    storage_live(@15)
    @15 := &result@9
    storage_live(@16)
    storage_live(@17)
    @17 := const (42 : i32)
    @16 := &@17
    @14 := (move (@15), move (@16))
    storage_dead(@16)
    storage_dead(@15)
    storage_live(left_val@18)
    left_val@18 := copy ((@14).0)
    storage_live(right_val@19)
    right_val@19 := copy ((@14).1)
    storage_live(@20)
    storage_live(@21)
    @21 := copy (*(left_val@18))
    storage_live(@22)
    @22 := copy (*(right_val@19))
    @20 := move (@21) == move (@22)
    if move (@20) {
    }
    else {
        storage_dead(@22)
        storage_dead(@21)
        storage_live(kind@23)
        kind@23 := AssertKind::Eq {  }
        storage_live(@24)
        @24 := move (kind@23)
        storage_live(@25)
        storage_live(@26)
        @26 := &*(left_val@18)
        @25 := &*(@26)
        storage_live(@27)
        storage_live(@28)
        @28 := &*(right_val@19)
        @27 := &*(@28)
        storage_live(@29)
        @29 := Option::None {  }
        panic(core::panicking::assert_failed)
    }
    storage_dead(@22)
    storage_dead(@21)
    storage_dead(@20)
    storage_dead(right_val@19)
    storage_dead(left_val@18)
    storage_dead(@17)
    storage_dead(@14)
    storage_dead(@13)
    @0 := ()
    storage_dead(result@9)
    drop[{impl Drop for Pin<Ptr>[@TraitClause0]}<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>[Sized<Rc<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]>]] pinned@4
    storage_dead(pinned@4)
    drop[{impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_), Global>[MetaSized<(dyn exists<_dyn> [@TraitClause0]: Simple<_dyn> + _dyn : '_)>, Sized<Global>]] trait_obj@2
    storage_dead(trait_obj@2)
    drop[{impl Drop for Rc<T>[@TraitClause0, @TraitClause1]}<i32, Global>[MetaSized<i32>, Sized<Global>]] val@1
    storage_dead(val@1)
    @0 := ()
    return
}

// Full name: test_crate::main
fn main()
{
    let @0: (); // return
    let @1: (); // anonymous local

    storage_live(@1)
    @1 := test_pin_simple()
    storage_dead(@1)
    @0 := ()
    @0 := ()
    return
}



