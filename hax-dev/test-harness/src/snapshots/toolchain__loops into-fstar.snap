---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: loops
    manifest: loops/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Loops.And_mut_side_effect_loop.fst" = '''
module Loops.And_mut_side_effect_loop
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let looping (array: t_Array u8 (mk_usize 5)) : t_Array u8 (mk_usize 5) =
  let array:t_Array u8 (mk_usize 5) =
    Rust_primitives.Hax.Folds.fold_range (mk_usize 0)
      (Core.Slice.impl__len #u8 (array <: t_Slice u8) <: usize)
      (fun array temp_1_ ->
          let array:t_Array u8 (mk_usize 5) = array in
          let _:usize = temp_1_ in
          true)
      array
      (fun array i ->
          let array:t_Array u8 (mk_usize 5) = array in
          let i:usize = i in
          Rust_primitives.Hax.Monomorphized_update_at.update_at_usize array
            i
            (cast (i <: usize) <: u8)
          <:
          t_Array u8 (mk_usize 5))
  in
  array

let looping_2_ (array: t_Array u8 (mk_usize 5)) : t_Array u8 (mk_usize 5) =
  let array, result:(t_Array u8 (mk_usize 5) & Prims.unit) =
    Rust_primitives.Hax.Folds.fold_range (mk_usize 0)
      (Core.Slice.impl__len #u8 (array <: t_Slice u8) <: usize)
      (fun array temp_1_ ->
          let array:t_Array u8 (mk_usize 5) = array in
          let _:usize = temp_1_ in
          true)
      array
      (fun array i ->
          let array:t_Array u8 (mk_usize 5) = array in
          let i:usize = i in
          Rust_primitives.Hax.Monomorphized_update_at.update_at_usize array
            i
            (cast (i <: usize) <: u8)
          <:
          t_Array u8 (mk_usize 5)),
    ()
    <:
    (t_Array u8 (mk_usize 5) & Prims.unit)
  in
  let _:Prims.unit = admit () (* Panic freedom *) in
  let _:Prims.unit = result in
  array
'''
"Loops.Control_flow.fst" = '''
module Loops.Control_flow
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let double_sum (_: Prims.unit) : i32 =
  let sum:i32 = mk_i32 0 in
  let sum:i32 =
    Rust_primitives.Hax.Folds.fold_range_cf (mk_i32 1)
      (mk_i32 10)
      (fun sum temp_1_ ->
          let sum:i32 = sum in
          let _:i32 = temp_1_ in
          true)
      sum
      (fun sum i ->
          let sum:i32 = sum in
          let i:i32 = i in
          if i <. mk_i32 0 <: bool
          then
            Core.Ops.Control_flow.ControlFlow_Break ((), sum <: (Prims.unit & i32))
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32
          else
            Core.Ops.Control_flow.ControlFlow_Continue (sum +! i <: i32)
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32)
  in
  sum *! mk_i32 2

let double_sum2 (_: Prims.unit) : i32 =
  let sum:i32 = mk_i32 0 in
  let sum2:i32 = mk_i32 0 in
  let sum, sum2:(i32 & i32) =
    Rust_primitives.Hax.Folds.fold_range_cf (mk_i32 1)
      (mk_i32 10)
      (fun temp_0_ temp_1_ ->
          let sum, sum2:(i32 & i32) = temp_0_ in
          let _:i32 = temp_1_ in
          true)
      (sum, sum2 <: (i32 & i32))
      (fun temp_0_ i ->
          let sum, sum2:(i32 & i32) = temp_0_ in
          let i:i32 = i in
          if i <. mk_i32 0 <: bool
          then
            Core.Ops.Control_flow.ControlFlow_Break
            ((), (sum, sum2 <: (i32 & i32)) <: (Prims.unit & (i32 & i32)))
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & (i32 & i32)) (i32 & i32)
          else
            let sum:i32 = sum +! i in
            Core.Ops.Control_flow.ControlFlow_Continue (sum, sum2 +! i <: (i32 & i32))
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & (i32 & i32)) (i32 & i32))
  in
  sum +! sum2

let double_sum_return (v: t_Slice i32) : i32 =
  let sum:i32 = mk_i32 0 in
  match
    Rust_primitives.Hax.Folds.fold_return (Core.Iter.Traits.Collect.f_into_iter #(t_Slice i32)
          #FStar.Tactics.Typeclasses.solve
          v
        <:
        Core.Slice.Iter.t_Iter i32)
      sum
      (fun sum i ->
          let sum:i32 = sum in
          let i:i32 = i in
          if i <. mk_i32 0 <: bool
          then
            Core.Ops.Control_flow.ControlFlow_Break
            (Core.Ops.Control_flow.ControlFlow_Break (mk_i32 0)
              <:
              Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32))
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32)) i32
          else
            Core.Ops.Control_flow.ControlFlow_Continue (sum +! i <: i32)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32)) i32)
    <:
    Core.Ops.Control_flow.t_ControlFlow i32 i32
  with
  | Core.Ops.Control_flow.ControlFlow_Break ret -> ret
  | Core.Ops.Control_flow.ControlFlow_Continue sum -> sum *! mk_i32 2

let double_sum2_return (v: t_Slice i32) : i32 =
  let sum:i32 = mk_i32 0 in
  let sum2:i32 = mk_i32 0 in
  match
    Rust_primitives.Hax.Folds.fold_return (Core.Iter.Traits.Collect.f_into_iter #(t_Slice i32)
          #FStar.Tactics.Typeclasses.solve
          v
        <:
        Core.Slice.Iter.t_Iter i32)
      (sum, sum2 <: (i32 & i32))
      (fun temp_0_ i ->
          let sum, sum2:(i32 & i32) = temp_0_ in
          let i:i32 = i in
          if i <. mk_i32 0 <: bool
          then
            Core.Ops.Control_flow.ControlFlow_Break
            (Core.Ops.Control_flow.ControlFlow_Break (mk_i32 0)
              <:
              Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & (i32 & i32)))
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & (i32 & i32))) (i32 & i32)
          else
            let sum:i32 = sum +! i in
            Core.Ops.Control_flow.ControlFlow_Continue (sum, sum2 +! i <: (i32 & i32))
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & (i32 & i32))) (i32 & i32))
    <:
    Core.Ops.Control_flow.t_ControlFlow i32 (i32 & i32)
  with
  | Core.Ops.Control_flow.ControlFlow_Break ret -> ret
  | Core.Ops.Control_flow.ControlFlow_Continue (sum, sum2) -> sum +! sum2

let bigger_power_2_ (x: i32) : i32 =
  let pow:i32 = mk_i32 1 in
  Rust_primitives.Hax.while_loop_cf (fun pow ->
        let pow:i32 = pow in
        pow <. mk_i32 1000000 <: bool)
    (fun pow ->
        let pow:i32 = pow in
        true)
    (fun pow ->
        let pow:i32 = pow in
        Rust_primitives.Hax.Int.from_machine (mk_u32 0) <: Hax_lib.Int.t_Int)
    pow
    (fun pow ->
        let pow:i32 = pow in
        let pow:i32 = pow *! mk_i32 2 in
        if pow <. x
        then
          let pow:i32 = pow *! mk_i32 3 in
          if true
          then
            Core.Ops.Control_flow.ControlFlow_Break ((), pow <: (Prims.unit & i32))
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32
          else
            Core.Ops.Control_flow.ControlFlow_Continue (pow *! mk_i32 2)
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32
        else
          Core.Ops.Control_flow.ControlFlow_Continue (pow *! mk_i32 2)
          <:
          Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32)

type t_M = { f_m:Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global }

let impl_M__decoded_message (self: t_M)
    : Core.Option.t_Option (Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global) =
  match
    Rust_primitives.Hax.Folds.fold_range_return (mk_usize 0)
      (Alloc.Vec.impl_1__len #u8 #Alloc.Alloc.t_Global self.f_m <: usize)
      (fun temp_0_ temp_1_ ->
          let _:Prims.unit = temp_0_ in
          let _:usize = temp_1_ in
          true)
      ()
      (fun temp_0_ i ->
          let _:Prims.unit = temp_0_ in
          let i:usize = i in
          if i >. mk_usize 5 <: bool
          then
            Core.Ops.Control_flow.ControlFlow_Break
            (Core.Ops.Control_flow.ControlFlow_Break
              (Core.Option.Option_None
                <:
                Core.Option.t_Option (Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global))
              <:
              Core.Ops.Control_flow.t_ControlFlow
                (Core.Option.t_Option (Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global))
                (Prims.unit & Prims.unit))
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow
                  (Core.Option.t_Option (Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global))
                  (Prims.unit & Prims.unit)) Prims.unit
          else
            Core.Ops.Control_flow.ControlFlow_Continue ()
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow
                  (Core.Option.t_Option (Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global))
                  (Prims.unit & Prims.unit)) Prims.unit)
    <:
    Core.Ops.Control_flow.t_ControlFlow
      (Core.Option.t_Option (Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)) Prims.unit
  with
  | Core.Ops.Control_flow.ControlFlow_Break ret -> ret
  | Core.Ops.Control_flow.ControlFlow_Continue _ ->
    Core.Option.Option_Some
    (Core.Clone.f_clone #(Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
        #FStar.Tactics.Typeclasses.solve
        self.f_m)
    <:
    Core.Option.t_Option (Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)

let nested (_: Prims.unit) : i32 =
  let sum:i32 = mk_i32 0 in
  let sum:i32 =
    Rust_primitives.Hax.Folds.fold_range (mk_i32 1)
      (mk_i32 10)
      (fun sum temp_1_ ->
          let sum:i32 = sum in
          let _:i32 = temp_1_ in
          true)
      sum
      (fun sum i ->
          let sum:i32 = sum in
          let i:i32 = i in
          let sum:i32 =
            Rust_primitives.Hax.Folds.fold_range_cf (mk_i32 1)
              (mk_i32 10)
              (fun sum temp_1_ ->
                  let sum:i32 = sum in
                  let _:i32 = temp_1_ in
                  true)
              sum
              (fun sum j ->
                  let sum:i32 = sum in
                  let j:i32 = j in
                  if j <. mk_i32 0 <: bool
                  then
                    Core.Ops.Control_flow.ControlFlow_Break ((), sum <: (Prims.unit & i32))
                    <:
                    Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32
                  else
                    Core.Ops.Control_flow.ControlFlow_Continue (sum +! j <: i32)
                    <:
                    Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32)
          in
          sum +! i)
  in
  sum *! mk_i32 2

let nested_return (_: Prims.unit) : i32 =
  let sum:i32 = mk_i32 0 in
  match
    Rust_primitives.Hax.Folds.fold_range_return (mk_i32 1)
      (mk_i32 10)
      (fun sum temp_1_ ->
          let sum:i32 = sum in
          let _:i32 = temp_1_ in
          true)
      sum
      (fun sum i ->
          let sum:i32 = sum in
          let i:i32 = i in
          match
            Rust_primitives.Hax.Folds.fold_range_return (mk_i32 1)
              (mk_i32 10)
              (fun sum temp_1_ ->
                  let sum:i32 = sum in
                  let _:i32 = temp_1_ in
                  true)
              sum
              (fun sum j ->
                  let sum:i32 = sum in
                  let j:i32 = j in
                  if j <. mk_i32 0 <: bool
                  then
                    Core.Ops.Control_flow.ControlFlow_Break
                    (Core.Ops.Control_flow.ControlFlow_Break (mk_i32 0)
                      <:
                      Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32))
                    <:
                    Core.Ops.Control_flow.t_ControlFlow
                      (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32)) i32
                  else
                    Core.Ops.Control_flow.ControlFlow_Continue (sum +! j <: i32)
                    <:
                    Core.Ops.Control_flow.t_ControlFlow
                      (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32)) i32)
            <:
            Core.Ops.Control_flow.t_ControlFlow i32 i32
          with
          | Core.Ops.Control_flow.ControlFlow_Break ret ->
            Core.Ops.Control_flow.ControlFlow_Break
            (Core.Ops.Control_flow.ControlFlow_Break ret
              <:
              Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32))
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32)) i32
          | Core.Ops.Control_flow.ControlFlow_Continue sum ->
            Core.Ops.Control_flow.ControlFlow_Continue (sum +! i <: i32)
            <:
            Core.Ops.Control_flow.t_ControlFlow
              (Core.Ops.Control_flow.t_ControlFlow i32 (Prims.unit & i32)) i32)
    <:
    Core.Ops.Control_flow.t_ControlFlow i32 i32
  with
  | Core.Ops.Control_flow.ControlFlow_Break ret -> ret
  | Core.Ops.Control_flow.ControlFlow_Continue sum -> sum *! mk_i32 2

let continue_only (x: t_Slice i32) : (i32 & Prims.unit) =
  let product:i32 = mk_i32 1 in
  Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(t_Slice i32)
        #FStar.Tactics.Typeclasses.solve
        x
      <:
      Core.Slice.Iter.t_Iter i32)
    product
    (fun product i ->
        let product:i32 = product in
        let i:i32 = i in
        if i =. mk_i32 0 <: bool
        then product
        else Core.Ops.Arith.f_mul_assign #i32 #i32 #FStar.Tactics.Typeclasses.solve product i <: i32
    ),
  ()
  <:
  (i32 & Prims.unit)

let continue_and_break (x: t_Slice i32) : (i32 & Prims.unit) =
  let product:i32 = mk_i32 1 in
  Rust_primitives.Hax.Folds.fold_cf (Core.Iter.Traits.Collect.f_into_iter #(t_Slice i32)
        #FStar.Tactics.Typeclasses.solve
        x
      <:
      Core.Slice.Iter.t_Iter i32)
    product
    (fun product i ->
        let product:i32 = product in
        let i:i32 = i in
        if i =. mk_i32 0 <: bool
        then
          Core.Ops.Control_flow.ControlFlow_Continue product
          <:
          Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32
        else
          if i <. mk_i32 0 <: bool
          then
            Core.Ops.Control_flow.ControlFlow_Break ((), product <: (Prims.unit & i32))
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32
          else
            Core.Ops.Control_flow.ControlFlow_Continue
            (Core.Ops.Arith.f_mul_assign #i32 #i32 #FStar.Tactics.Typeclasses.solve product i <: i32
            )
            <:
            Core.Ops.Control_flow.t_ControlFlow (Prims.unit & i32) i32),
  ()
  <:
  (i32 & Prims.unit)
'''
"Loops.For_loops.fst" = '''
module Loops.For_loops
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let range1 (_: Prims.unit) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Rust_primitives.Hax.Folds.fold_range (mk_usize 0)
      (mk_usize 15)
      (fun acc temp_1_ ->
          let acc:usize = acc in
          let _:usize = temp_1_ in
          true)
      acc
      (fun acc i ->
          let acc:usize = acc in
          let i:usize = i in
          acc +! i <: usize)
  in
  acc

let range2 (n: usize) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Rust_primitives.Hax.Folds.fold_range (mk_usize 0)
      (n +! mk_usize 10 <: usize)
      (fun acc temp_1_ ->
          let acc:usize = acc in
          let _:usize = temp_1_ in
          true)
      acc
      (fun acc i ->
          let acc:usize = acc in
          let i:usize = i in
          (acc +! i <: usize) +! mk_usize 1 <: usize)
  in
  acc

let composed_range (n: usize) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Iter.Adapters.Chain.t_Chain
              (Core.Ops.Range.t_Range usize) (Core.Ops.Range.t_Range usize))
          #FStar.Tactics.Typeclasses.solve
          (Core.Iter.Traits.Iterator.f_chain #(Core.Ops.Range.t_Range usize)
              #FStar.Tactics.Typeclasses.solve
              #(Core.Ops.Range.t_Range usize)
              ({ Core.Ops.Range.f_start = mk_usize 0; Core.Ops.Range.f_end = n }
                <:
                Core.Ops.Range.t_Range usize)
              ({
                  Core.Ops.Range.f_start = n +! mk_usize 10 <: usize;
                  Core.Ops.Range.f_end = n +! mk_usize 50 <: usize
                }
                <:
                Core.Ops.Range.t_Range usize)
            <:
            Core.Iter.Adapters.Chain.t_Chain (Core.Ops.Range.t_Range usize)
              (Core.Ops.Range.t_Range usize))
        <:
        Core.Iter.Adapters.Chain.t_Chain (Core.Ops.Range.t_Range usize)
          (Core.Ops.Range.t_Range usize))
      acc
      (fun acc i ->
          let acc:usize = acc in
          let i:usize = i in
          (acc +! i <: usize) +! mk_usize 1 <: usize)
  in
  acc

let rev_range (n: usize) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Iter.Adapters.Rev.t_Rev
            (Core.Ops.Range.t_Range usize))
          #FStar.Tactics.Typeclasses.solve
          (Core.Iter.Traits.Iterator.f_rev #(Core.Ops.Range.t_Range usize)
              #FStar.Tactics.Typeclasses.solve
              ({ Core.Ops.Range.f_start = mk_usize 0; Core.Ops.Range.f_end = n }
                <:
                Core.Ops.Range.t_Range usize)
            <:
            Core.Iter.Adapters.Rev.t_Rev (Core.Ops.Range.t_Range usize))
        <:
        Core.Iter.Adapters.Rev.t_Rev (Core.Ops.Range.t_Range usize))
      acc
      (fun acc i ->
          let acc:usize = acc in
          let i:usize = i in
          (acc +! i <: usize) +! mk_usize 1 <: usize)
  in
  acc

let chunks (v_CHUNK_LEN: usize) (arr: Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global) : usize =
  let acc:usize = mk_usize 0 in
  let chunks:Core.Slice.Iter.t_ChunksExact usize =
    Core.Slice.impl__chunks_exact #usize
      (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global)
          #FStar.Tactics.Typeclasses.solve
          arr
        <:
        t_Slice usize)
      v_CHUNK_LEN
  in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Slice.Iter.t_ChunksExact
            usize)
          #FStar.Tactics.Typeclasses.solve
          (Core.Clone.f_clone #(Core.Slice.Iter.t_ChunksExact usize)
              #FStar.Tactics.Typeclasses.solve
              chunks
            <:
            Core.Slice.Iter.t_ChunksExact usize)
        <:
        Core.Slice.Iter.t_ChunksExact usize)
      acc
      (fun acc chunk ->
          let acc:usize = acc in
          let chunk:t_Slice usize = chunk in
          let mean:usize = mk_usize 0 in
          let mean:usize =
            Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(t_Slice usize)
                  #FStar.Tactics.Typeclasses.solve
                  chunk
                <:
                Core.Slice.Iter.t_Iter usize)
              mean
              (fun mean item ->
                  let mean:usize = mean in
                  let item:usize = item in
                  mean +! item <: usize)
          in
          let acc:usize = acc +! (mean /! v_CHUNK_LEN <: usize) in
          acc)
  in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(t_Slice usize)
          #FStar.Tactics.Typeclasses.solve
          (Core.Slice.Iter.impl_88__remainder #usize chunks <: t_Slice usize)
        <:
        Core.Slice.Iter.t_Iter usize)
      acc
      (fun acc item ->
          let acc:usize = acc in
          let item:usize = item in
          acc -! item <: usize)
  in
  acc

let iterator (arr: Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Slice.Iter.t_Iter
            usize)
          #FStar.Tactics.Typeclasses.solve
          (Core.Slice.impl__iter #usize
              (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global)
                  #FStar.Tactics.Typeclasses.solve
                  arr
                <:
                t_Slice usize)
            <:
            Core.Slice.Iter.t_Iter usize)
        <:
        Core.Slice.Iter.t_Iter usize)
      acc
      (fun acc item ->
          let acc:usize = acc in
          let item:usize = item in
          acc +! item <: usize)
  in
  acc

let nested (arr: Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Slice.Iter.t_Iter
            usize)
          #FStar.Tactics.Typeclasses.solve
          (Core.Slice.impl__iter #usize
              (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global)
                  #FStar.Tactics.Typeclasses.solve
                  arr
                <:
                t_Slice usize)
            <:
            Core.Slice.Iter.t_Iter usize)
        <:
        Core.Slice.Iter.t_Iter usize)
      acc
      (fun acc item ->
          let acc:usize = acc in
          let item:usize = item in
          Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Iter.Adapters.Rev.t_Rev
                  (Core.Ops.Range.t_Range usize))
                #FStar.Tactics.Typeclasses.solve
                (Core.Iter.Traits.Iterator.f_rev #(Core.Ops.Range.t_Range usize)
                    #FStar.Tactics.Typeclasses.solve
                    ({ Core.Ops.Range.f_start = mk_usize 0; Core.Ops.Range.f_end = item }
                      <:
                      Core.Ops.Range.t_Range usize)
                  <:
                  Core.Iter.Adapters.Rev.t_Rev (Core.Ops.Range.t_Range usize))
              <:
              Core.Iter.Adapters.Rev.t_Rev (Core.Ops.Range.t_Range usize))
            acc
            (fun acc i ->
                let acc:usize = acc in
                let i:usize = i in
                let acc:usize = acc +! mk_usize 1 in
                Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Iter.Adapters.Zip.t_Zip
                          (Core.Slice.Iter.t_Iter usize) (Core.Ops.Range.t_Range usize))
                      #FStar.Tactics.Typeclasses.solve
                      (Core.Iter.Traits.Iterator.f_zip #(Core.Slice.Iter.t_Iter usize)
                          #FStar.Tactics.Typeclasses.solve
                          #(Core.Ops.Range.t_Range usize)
                          (Core.Slice.impl__iter #usize
                              (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global)
                                  #FStar.Tactics.Typeclasses.solve
                                  arr
                                <:
                                t_Slice usize)
                            <:
                            Core.Slice.Iter.t_Iter usize)
                          ({ Core.Ops.Range.f_start = mk_usize 4; Core.Ops.Range.f_end = i }
                            <:
                            Core.Ops.Range.t_Range usize)
                        <:
                        Core.Iter.Adapters.Zip.t_Zip (Core.Slice.Iter.t_Iter usize)
                          (Core.Ops.Range.t_Range usize))
                    <:
                    Core.Iter.Adapters.Zip.t_Zip (Core.Slice.Iter.t_Iter usize)
                      (Core.Ops.Range.t_Range usize))
                  acc
                  (fun acc j ->
                      let acc:usize = acc in
                      let j:(usize & usize) = j in
                      (((acc +! item <: usize) +! i <: usize) +! j._1 <: usize) +! j._2 <: usize))
          <:
          usize)
  in
  acc

let pattern (arr: Alloc.Vec.t_Vec (usize & usize) Alloc.Alloc.t_Global) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Alloc.Vec.t_Vec
              (usize & usize) Alloc.Alloc.t_Global)
          #FStar.Tactics.Typeclasses.solve
          arr
        <:
        Alloc.Vec.Into_iter.t_IntoIter (usize & usize) Alloc.Alloc.t_Global)
      acc
      (fun acc temp_1_ ->
          let acc:usize = acc in
          let x, y:(usize & usize) = temp_1_ in
          acc +! (x *! y <: usize) <: usize)
  in
  acc

let enumerate_chunks (arr: Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global) : usize =
  let acc:usize = mk_usize 0 in
  let acc:usize =
    Core.Iter.Traits.Iterator.f_fold (Core.Iter.Traits.Collect.f_into_iter #(Core.Iter.Adapters.Enumerate.t_Enumerate
            (Core.Slice.Iter.t_Chunks usize))
          #FStar.Tactics.Typeclasses.solve
          (Core.Iter.Traits.Iterator.f_enumerate #(Core.Slice.Iter.t_Chunks usize)
              #FStar.Tactics.Typeclasses.solve
              (Core.Slice.impl__chunks #usize
                  (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec usize Alloc.Alloc.t_Global)
                      #FStar.Tactics.Typeclasses.solve
                      arr
                    <:
                    t_Slice usize)
                  (mk_usize 4)
                <:
                Core.Slice.Iter.t_Chunks usize)
            <:
            Core.Iter.Adapters.Enumerate.t_Enumerate (Core.Slice.Iter.t_Chunks usize))
        <:
        Core.Iter.Adapters.Enumerate.t_Enumerate (Core.Slice.Iter.t_Chunks usize))
      acc
      (fun acc temp_1_ ->
          let acc:usize = acc in
          let i, chunk:(usize & t_Slice usize) = temp_1_ in
          Rust_primitives.Hax.Folds.fold_enumerated_slice chunk
            (fun acc temp_1_ ->
                let acc:usize = acc in
                let _:usize = temp_1_ in
                true)
            acc
            (fun acc temp_1_ ->
                let acc:usize = acc in
                let j, x:(usize & usize) = temp_1_ in
                (i +! j <: usize) +! x <: usize)
          <:
          usize)
  in
  acc

let bool_returning (x: u8) : bool = x <. mk_u8 10

let f (_: Prims.unit) : (u8 & Prims.unit) =
  let acc:u8 = mk_u8 0 in
  Rust_primitives.Hax.Folds.fold_range (mk_u8 1)
    (mk_u8 10)
    (fun acc temp_1_ ->
        let acc:u8 = acc in
        let _:u8 = temp_1_ in
        true)
    acc
    (fun acc i ->
        let acc:u8 = acc in
        let i:u8 = i in
        let acc:u8 = acc +! i in
        let _:bool = bool_returning i in
        acc),
  ()
  <:
  (u8 & Prims.unit)
'''
"Loops.Recognized_loops.fst" = '''
module Loops.Recognized_loops
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let range (_: Prims.unit) : (u64 & Prims.unit) =
  let count:u64 = mk_u64 0 in
  Rust_primitives.Hax.Folds.fold_range (mk_u8 0)
    (mk_u8 10)
    (fun count i ->
        let count:u64 = count in
        let i:u8 = i in
        i <=. mk_u8 10 <: bool)
    count
    (fun count i ->
        let count:u64 = count in
        let i:u8 = i in
        let count:u64 = count +! mk_u64 1 in
        count),
  ()
  <:
  (u64 & Prims.unit)

let range_step_by (_: Prims.unit) : (u64 & Prims.unit) =
  let count:u64 = mk_u64 0 in
  Rust_primitives.Hax.Folds.fold_range_step_by (mk_u8 0)
    (mk_u8 10)
    (mk_usize 2)
    (fun count i ->
        let count:u64 = count in
        let i:u8 = i in
        i <=. mk_u8 10 <: bool)
    count
    (fun count i ->
        let count:u64 = count in
        let i:u8 = i in
        let count:u64 = count +! mk_u64 1 in
        count),
  ()
  <:
  (u64 & Prims.unit)

let enumerated_slice (#v_T: Type0) (slice: t_Slice v_T) : (u64 & Prims.unit) =
  let count:u64 = mk_u64 0 in
  Rust_primitives.Hax.Folds.fold_enumerated_slice slice
    (fun count i ->
        let count:u64 = count in
        let i:usize = i in
        i <=. mk_usize 10 <: bool)
    count
    (fun count i ->
        let count:u64 = count in
        let i:(usize & v_T) = i in
        let count:u64 = count +! mk_u64 2 in
        count),
  ()
  <:
  (u64 & Prims.unit)

let enumerated_chunked_slice (#v_T: Type0) (slice: t_Slice v_T) : (u64 & Prims.unit) =
  let count:u64 = mk_u64 0 in
  Rust_primitives.Hax.Folds.fold_enumerated_chunked_slice (mk_usize 3)
    slice
    (fun count i ->
        let count:u64 = count in
        let i:usize = i in
        i <= Core.Slice.impl__len #v_T slice)
    count
    (fun count i ->
        let count:u64 = count in
        let i:(usize & t_Slice v_T) = i in
        let count:u64 = count +! mk_u64 3 in
        count),
  ()
  <:
  (u64 & Prims.unit)
'''
"Loops.While_loops.fst" = '''
module Loops.While_loops
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let f (_: Prims.unit) : u8 =
  let x:u8 = mk_u8 0 in
  let x:u8 =
    Rust_primitives.Hax.while_loop (fun x ->
          let x:u8 = x in
          x <. mk_u8 10 <: bool)
      (fun x ->
          let x:u8 = x in
          true)
      (fun x ->
          let x:u8 = x in
          Rust_primitives.Hax.Int.from_machine (mk_u32 0) <: Hax_lib.Int.t_Int)
      x
      (fun x ->
          let x:u8 = x in
          let x:u8 = x +! mk_u8 3 in
          x)
  in
  x +! mk_u8 12

let while_invariant_decr (_: Prims.unit) : u8 =
  let x:u8 = mk_u8 0 in
  let x:u8 =
    Rust_primitives.Hax.while_loop (fun x ->
          let x:u8 = x in
          x <. mk_u8 10 <: bool)
      (fun x ->
          let x:u8 = x in
          b2t (x <=. mk_u8 10 <: bool))
      (fun x ->
          let x:u8 = x in
          Rust_primitives.Hax.Int.from_machine (mk_u8 10 -! x <: u8) <: Hax_lib.Int.t_Int)
      x
      (fun x ->
          let x:u8 = x in
          let x:u8 = x +! mk_u8 3 in
          x)
  in
  x +! mk_u8 12

let while_invariant_decr_rev (_: Prims.unit) : u8 =
  let x:u8 = mk_u8 0 in
  let x:u8 =
    Rust_primitives.Hax.while_loop (fun x ->
          let x:u8 = x in
          x <. mk_u8 10 <: bool)
      (fun x ->
          let x:u8 = x in
          b2t (x <=. mk_u8 10 <: bool))
      (fun x ->
          let x:u8 = x in
          Rust_primitives.Hax.Int.from_machine (mk_u8 10 -! x <: u8) <: Hax_lib.Int.t_Int)
      x
      (fun x ->
          let x:u8 = x in
          let x:u8 = x +! mk_u8 3 in
          x)
  in
  x +! mk_u8 12
'''
