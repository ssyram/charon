---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: ssprove
  info:
    name: guards
    manifest: guards/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Guards.v" = '''
(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations if_let_guard (x : both (t_Option (t_Result int32 int32))) : both int32 :=
  if_let_guard x  :=
    matchb x with
    | Option_None_case  =>
      ret_both (0 : int32)
    | _ =>
      matchb matchb x with
      | Option_Some_case v =>
        letb v := ret_both ((v) : (t_Result int32 int32)) in
        matchb v with
        | Result_Ok_case y =>
          letb y := ret_both ((y) : (int32)) in
          Option_Some y
        | _ =>
          Option_None
        end
      | _ =>
        Option_None
      end with
      | Option_Some_case x =>
        letb x := ret_both ((x) : (int32)) in
        x
      | Option_None_case  =>
        matchb x with
        | Option_Some_case Result_Err y =>
          letb y := ret_both ((((y))) : (t_Result int32 int32)) in
          y
        | _ =>
          ret_both (1 : int32)
        end
      end
    end : both int32.
Fail Next Obligation.

Equations equivalent (x : both (t_Option (t_Result int32 int32))) : both int32 :=
  equivalent x  :=
    matchb x with
    | Option_None_case  =>
      ret_both (0 : int32)
    | _ =>
      matchb matchb x with
      | Option_Some_case v =>
        letb v := ret_both ((v) : (t_Result int32 int32)) in
        matchb v with
        | Result_Ok_case y =>
          letb y := ret_both ((y) : (int32)) in
          Option_Some y
        | _ =>
          Option_None
        end
      | _ =>
        Option_None
      end with
      | Option_Some_case y =>
        letb y := ret_both ((y) : (int32)) in
        y
      | Option_None_case  =>
        matchb x with
        | Option_Some_case Result_Err y =>
          letb y := ret_both ((((y))) : (t_Result int32 int32)) in
          y
        | _ =>
          ret_both (1 : int32)
        end
      end
    end : both int32.
Fail Next Obligation.

Equations multiple_guards (x : both (t_Option (t_Result int32 int32))) : both int32 :=
  multiple_guards x  :=
    matchb x with
    | Option_None_case  =>
      ret_both (0 : int32)
    | _ =>
      matchb matchb x with
      | Option_Some_case Result_Ok v =>
        letb v := ret_both ((((v))) : (t_Result int32 int32)) in
        matchb Option_Some (v .+ (ret_both (1 : int32))) with
        | Option_Some_case 1 =>
          letb 1 := ret_both ((1) : (int32)) in
          Option_Some (ret_both (0 : int32))
        | _ =>
          Option_None
        end
      | _ =>
        Option_None
      end with
      | Option_Some_case x =>
        letb x := ret_both ((x) : (int32)) in
        x
      | Option_None_case  =>
        matchb matchb x with
        | Option_Some_case v =>
          letb v := ret_both ((v) : (t_Result int32 int32)) in
          matchb v with
          | Result_Ok_case y =>
            letb y := ret_both ((y) : (int32)) in
            Option_Some y
          | _ =>
            Option_None
          end
        | _ =>
          Option_None
        end with
        | Option_Some_case x =>
          letb x := ret_both ((x) : (int32)) in
          x
        | Option_None_case  =>
          matchb x with
          | Option_Some_case Result_Err y =>
            letb y := ret_both ((((y))) : (t_Result int32 int32)) in
            y
          | _ =>
            ret_both (1 : int32)
          end
        end
      end
    end : both int32.
Fail Next Obligation.

Equations if_guard (x : both (t_Option int32)) : both int32 :=
  if_guard x  :=
    matchb matchb x with
    | Option_Some_case v =>
      letb v := ret_both ((v) : (int32)) in
      matchb v >.? (ret_both (0 : int32)) with
      | true =>
        Option_Some v
      | _ =>
        Option_None
      end
    | _ =>
      Option_None
    end with
    | Option_Some_case x =>
      letb x := ret_both ((x) : (int32)) in
      x
    | Option_None_case  =>
      ret_both (0 : int32)
    end : both int32.
Fail Next Obligation.
'''
