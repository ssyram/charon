---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: ssprove
  info:
    name: let-else
    manifest: let-else/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Let_else.v" = '''
(* File automatically generated by Hacspec *)
Set Warnings "-notation-overridden,-ambiguous-paths".
From Crypt Require Import choice_type Package Prelude.
Import PackageNotation.
From extructures Require Import ord fset.
From mathcomp Require Import word_ssrZ word.
(* From Jasmin Require Import word. *)

From Coq Require Import ZArith.
From Coq Require Import Strings.String.
Import List.ListNotations.
Open Scope list_scope.
Open Scope Z_scope.
Open Scope bool_scope.

From Hacspec Require Import ChoiceEquality.
From Hacspec Require Import LocationUtility.
From Hacspec Require Import Hacspec_Lib_Comparable.
From Hacspec Require Import Hacspec_Lib_Pre.
From Hacspec Require Import Hacspec_Lib.

Open Scope hacspec_scope.
Import choice.Choice.Exports.

From RecordUpdate Require Import RecordUpdate.

Import RecordSetNotations.

Obligation Tactic := (* try timeout 8 *) solve_ssprove_obligations.

(*Not implemented yet? todo(item)*)

Equations let_else (opt : both (t_Option int32)) : both 'bool :=
  let_else opt  :=
    run (matchb opt with
    | Option_Some_case x =>
      letb x := ret_both ((x) : (int32)) in
      ControlFlow_Continue (ret_both (true : 'bool))
    | _ =>
      ControlFlow_Break (ret_both (false : 'bool))
    end) : both 'bool.
Fail Next Obligation.

Equations let_else_different_type (opt : both (t_Option int32)) : both 'bool :=
  let_else_different_type opt  :=
    run (letm[choice_typeMonad.result_bind_code 'bool] hoist1 := matchb opt with
    | Option_Some_case x =>
      letb x := ret_both ((x) : (int32)) in
      ControlFlow_Continue (Option_Some (x .+ (ret_both (1 : int32))))
    | _ =>
      ControlFlow_Break (ret_both (false : 'bool))
    end in
    ControlFlow_Continue (let_else hoist1)) : both 'bool.
Fail Next Obligation.
'''
