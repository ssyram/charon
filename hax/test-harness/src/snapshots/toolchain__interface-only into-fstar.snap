---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: interface-only
    manifest: cli/interface-only/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: true
      stdout: true
    include_flag: "+:** -interface_only::Foo"
    backend_options: ~
---
exit = 0
stderr = 'Finished `dev` profile [unoptimized + debuginfo] target(s) in XXs'

[stdout]
diagnostics = []

[stdout.files]
"Interface_only.fst" = '''
module Interface_only
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

/// This item contains unsafe blocks and raw references, two features
/// not supported by hax. Thanks to the `-i` flag and the `+:`
/// modifier, `f` is still extractable as an interface.
/// Expressions within type are still extracted, as well as pre- and
/// post-conditions.
assume
val f': x: u8
  -> Prims.Pure (t_Array u8 (mk_usize 4))
      (requires x <. mk_u8 254)
      (ensures
        fun r ->
          let r:t_Array u8 (mk_usize 4) = r in
          (r.[ mk_usize 0 ] <: u8) >. x)

unfold
let f = f'

type t_Bar = | Bar : t_Bar

/// Non-inherent implementations are extracted, their bodies are not
/// dropped. This might be a bit surprising: see
/// https://github.com/hacspec/hax/issues/616.
[@@ FStar.Tactics.Typeclasses.tcinstance]
assume
val impl': Core.Convert.t_From t_Bar Prims.unit

unfold
let impl = impl'

/// If you need to drop the body of a method, please hoist it:
[@@ FStar.Tactics.Typeclasses.tcinstance]
assume
val impl_1': Core.Convert.t_From t_Bar u8

unfold
let impl_1 = impl_1'

assume
val f_from__impl_1__from': u8 -> t_Bar

unfold
let f_from__impl_1__from = f_from__impl_1__from'

type t_Holder (v_T: Type0) = { f_value:Alloc.Vec.t_Vec v_T Alloc.Alloc.t_Global }

[@@ FStar.Tactics.Typeclasses.tcinstance]
assume
val impl_2': #v_T: Type0 -> Core.Convert.t_From (t_Holder v_T) Prims.unit

unfold
let impl_2 (#v_T: Type0) = impl_2' #v_T

type t_Param (v_SIZE: usize) = { f_value:t_Array u8 v_SIZE }

[@@ FStar.Tactics.Typeclasses.tcinstance]
assume
val impl_3': v_SIZE: usize -> Core.Convert.t_From (t_Param v_SIZE) Prims.unit

unfold
let impl_3 (v_SIZE: usize) = impl_3' v_SIZE

assume
val ff_generic': v_X: usize -> #v_U: Type0 -> e_x: v_U -> t_Param v_X

unfold
let ff_generic (v_X: usize) (#v_U: Type0) = ff_generic' v_X #v_U

class t_T (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_Assoc:Type0;
  f_d_pre:Prims.unit -> Type0;
  f_d_post:Prims.unit -> Prims.unit -> Type0;
  f_d:x0: Prims.unit -> Prims.Pure Prims.unit (f_d_pre x0) (fun result -> f_d_post x0 result)
}

/// Impls with associated types are not erased
[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_T_for_u8: t_T u8 =
  {
    f_Assoc = u8;
    f_d_pre = (fun (_: Prims.unit) -> true);
    f_d_post = (fun (_: Prims.unit) (out: Prims.unit) -> true);
    f_d = fun (_: Prims.unit) -> ()
  }

class t_T2 (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_d_pre:Prims.unit -> Type0;
  f_d_post:Prims.unit -> Prims.unit -> Type0;
  f_d:x0: Prims.unit -> Prims.Pure Prims.unit (f_d_pre x0) (fun result -> f_d_post x0 result)
}

/// Items can be forced to be transparent
[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_T2_for_u8: t_T2 u8 =
  {
    f_d_pre = (fun (_: Prims.unit) -> false);
    f_d_post = (fun (_: Prims.unit) (out: Prims.unit) -> true);
    f_d = fun (_: Prims.unit) -> ()
  }

assume
val padlen': b: t_Slice u8 -> n: usize
  -> Prims.Pure usize
      (requires (Core.Slice.impl__len #u8 b <: usize) >=. n)
      (ensures
        fun out ->
          let out:usize = out in
          out <=. n)

unfold
let padlen = padlen'
'''
