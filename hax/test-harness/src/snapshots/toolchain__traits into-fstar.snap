---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: traits
    manifest: traits/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Traits.Block_size.fst" = '''
module Traits.Block_size
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_BlockSizeUser (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_BlockSize:Type0
}

class t_ParBlocksSizeUser (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_5884559561557426095:t_BlockSizeUser v_Self
}

class t_BlockBackend (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_17422710415653782164:t_ParBlocksSizeUser v_Self;
  f_proc_block_pre:Alloc.Vec.t_Vec _ Alloc.Alloc.t_Global -> Type0;
  f_proc_block_post:Alloc.Vec.t_Vec _ Alloc.Alloc.t_Global -> Prims.unit -> Type0;
  f_proc_block:x0: Alloc.Vec.t_Vec _ Alloc.Alloc.t_Global
    -> Prims.Pure Prims.unit (f_proc_block_pre x0) (fun result -> f_proc_block_post x0 result)
}
'''
"Traits.Default_traits_parameters.fst" = '''
module Traits.Default_traits_parameters
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_Bar (v_Self: Type0) (v_T: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self
}

class t_Foo (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_7275791365833186636:t_Bar v_Self f_U;
  f_U:Type0
}
'''
"Traits.For_clauses.Issue_495_.Minimized_3_.fst" = '''
module Traits.For_clauses.Issue_495_.Minimized_3_
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_Trait (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self
}

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl
      (#v_P: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i0: Core.Ops.Function.t_FnMut v_P u8)
    : t_Trait v_P = { __marker_trait = () }
'''
"Traits.For_clauses.Issue_495_.fst" = '''
module Traits.For_clauses.Issue_495_
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let original_function_from_495_ (list: Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global) : Prims.unit =
  let (e_indices: Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global):Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global =
    Core.Iter.Traits.Iterator.f_collect #(Core.Iter.Adapters.Filter.t_Filter
          (Core.Ops.Range.t_Range u8) (u8 -> bool))
      #FStar.Tactics.Typeclasses.solve
      #(Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
      (Core.Iter.Traits.Iterator.f_filter #(Core.Ops.Range.t_Range u8)
          #FStar.Tactics.Typeclasses.solve
          ({ Core.Ops.Range.f_start = mk_u8 0; Core.Ops.Range.f_end = mk_u8 5 }
            <:
            Core.Ops.Range.t_Range u8)
          (fun i ->
              let i:u8 = i in
              let _, out:(Core.Slice.Iter.t_Iter u8 & bool) =
                Core.Iter.Traits.Iterator.f_any #(Core.Slice.Iter.t_Iter u8)
                  #FStar.Tactics.Typeclasses.solve
                  (Core.Slice.impl__iter #u8
                      (Core.Ops.Deref.f_deref #(Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
                          #FStar.Tactics.Typeclasses.solve
                          list
                        <:
                        t_Slice u8)
                    <:
                    Core.Slice.Iter.t_Iter u8)
                  (fun n ->
                      let n:u8 = n in
                      n =. i <: bool)
              in
              out)
        <:
        Core.Iter.Adapters.Filter.t_Filter (Core.Ops.Range.t_Range u8) (u8 -> bool))
  in
  ()

let minimized_1_ (list: Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
    : Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global =
  Core.Iter.Traits.Iterator.f_collect #(Core.Iter.Adapters.Filter.t_Filter
        (Core.Ops.Range.t_Range u8) (u8 -> bool))
    #FStar.Tactics.Typeclasses.solve
    #(Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
    (Core.Iter.Traits.Iterator.f_filter #(Core.Ops.Range.t_Range u8)
        #FStar.Tactics.Typeclasses.solve
        ({ Core.Ops.Range.f_start = mk_u8 0; Core.Ops.Range.f_end = mk_u8 5 }
          <:
          Core.Ops.Range.t_Range u8)
        (fun temp_0_ ->
            let _:u8 = temp_0_ in
            true)
      <:
      Core.Iter.Adapters.Filter.t_Filter (Core.Ops.Range.t_Range u8) (u8 -> bool))

let minimized_2_ (it: Core.Iter.Adapters.Filter.t_Filter (Core.Ops.Range.t_Range u8) (u8 -> bool))
    : Prims.unit =
  let (e_indices: Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global):Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global =
    Core.Iter.Traits.Iterator.f_collect #(Core.Iter.Adapters.Filter.t_Filter
          (Core.Ops.Range.t_Range u8) (u8 -> bool))
      #FStar.Tactics.Typeclasses.solve
      #(Alloc.Vec.t_Vec u8 Alloc.Alloc.t_Global)
      it
  in
  ()
'''
"Traits.For_clauses.fst" = '''
module Traits.For_clauses
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_Foo (v_Self: Type0) (v_T: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_to_t_pre:v_Self -> Type0;
  f_to_t_post:v_Self -> v_T -> Type0;
  f_to_t:x0: v_Self -> Prims.Pure v_T (f_to_t_pre x0) (fun result -> f_to_t_post x0 result)
}

let e_f (#v_X: Type0) (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_Foo v_X u8) (x: v_X)
    : Prims.unit =
  let _:u8 = f_to_t #v_X #u8 #FStar.Tactics.Typeclasses.solve x in
  ()
'''
"Traits.Impl_expr_in_goal.fst" = '''
module Traits.Impl_expr_in_goal
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_T1 (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_Assoc:Type0
}

class t_T2 (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self
}

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl
      (#v_U: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_T1 v_U)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i2: t_T2 i1.f_Assoc)
    : t_T2 v_U = { __marker_trait = () }
'''
"Traits.Implement_arithmetic_trait.fst" = '''
module Traits.Implement_arithmetic_trait
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_Wrapped = | Wrapped : i32 -> t_Wrapped

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: Core.Ops.Arith.t_Add t_Wrapped t_Wrapped =
  {
    f_Output = t_Wrapped;
    f_add_pre = (fun (self: t_Wrapped) (rhs: t_Wrapped) -> true);
    f_add_post = (fun (self: t_Wrapped) (rhs: t_Wrapped) (out: t_Wrapped) -> true);
    f_add = fun (self: t_Wrapped) (rhs: t_Wrapped) -> Wrapped (self._0 +! rhs._0) <: t_Wrapped
  }

let test (x y: t_Wrapped) : t_Wrapped =
  Core.Ops.Arith.f_add #t_Wrapped #t_Wrapped #FStar.Tactics.Typeclasses.solve x y
'''
"Traits.Implicit_dependencies_issue_667_.Define_type.fst" = '''
module Traits.Implicit_dependencies_issue_667_.Define_type
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_MyType = | MyType : t_MyType
'''
"Traits.Implicit_dependencies_issue_667_.Impl_type.fst" = '''
module Traits.Implicit_dependencies_issue_667_.Impl_type
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: Traits.Implicit_dependencies_issue_667_.Trait_definition.t_MyTrait
Traits.Implicit_dependencies_issue_667_.Define_type.t_MyType =
  {
    f_my_method_pre
    =
    (fun (self: Traits.Implicit_dependencies_issue_667_.Define_type.t_MyType) -> true);
    f_my_method_post
    =
    (fun (self: Traits.Implicit_dependencies_issue_667_.Define_type.t_MyType) (out: Prims.unit) ->
        true);
    f_my_method = fun (self: Traits.Implicit_dependencies_issue_667_.Define_type.t_MyType) -> ()
  }
'''
"Traits.Implicit_dependencies_issue_667_.Trait_definition.fst" = '''
module Traits.Implicit_dependencies_issue_667_.Trait_definition
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_MyTrait (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_my_method_pre:v_Self -> Type0;
  f_my_method_post:v_Self -> Prims.unit -> Type0;
  f_my_method:x0: v_Self
    -> Prims.Pure Prims.unit (f_my_method_pre x0) (fun result -> f_my_method_post x0 result)
}
'''
"Traits.Implicit_dependencies_issue_667_.Use_type.fst" = '''
module Traits.Implicit_dependencies_issue_667_.Use_type
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let _ =
  (* This module has implicit dependencies, here we make them explicit. *)
  (* The implicit dependencies arise from typeclasses instances. *)
  let open Traits.Implicit_dependencies_issue_667_.Impl_type in
  let open Traits.Implicit_dependencies_issue_667_.Trait_definition in
  ()

let some_function (x: Traits.Implicit_dependencies_issue_667_.Define_type.t_MyType) : Prims.unit =
  Traits.Implicit_dependencies_issue_667_.Trait_definition.f_my_method #Traits.Implicit_dependencies_issue_667_.Define_type.t_MyType
    #FStar.Tactics.Typeclasses.solve
    x
'''
"Traits.Implicit_explicit_calling_conventions.fst" = '''
module Traits.Implicit_explicit_calling_conventions
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_Type (v_TypeArg: Type0) (v_ConstArg: usize) = { f_field:t_Array v_TypeArg v_ConstArg }

class t_Trait (v_Self: Type0) (v_TypeArg: Type0) (v_ConstArg: usize) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_method_pre:
      #v_MethodTypeArg: Type0 ->
      v_MethodConstArg: usize ->
      v_Self ->
      v_TypeArg ->
      t_Type v_TypeArg v_ConstArg
    -> Type0;
  f_method_post:
      #v_MethodTypeArg: Type0 ->
      v_MethodConstArg: usize ->
      v_Self ->
      v_TypeArg ->
      t_Type v_TypeArg v_ConstArg ->
      Prims.unit
    -> Type0;
  f_method:
      #v_MethodTypeArg: Type0 ->
      v_MethodConstArg: usize ->
      x0: v_Self ->
      x1: v_TypeArg ->
      x2: t_Type v_TypeArg v_ConstArg
    -> Prims.Pure Prims.unit
        (f_method_pre #v_MethodTypeArg v_MethodConstArg x0 x1 x2)
        (fun result -> f_method_post #v_MethodTypeArg v_MethodConstArg x0 x1 x2 result);
  f_associated_function_pre:
      #v_MethodTypeArg: Type0 ->
      v_MethodConstArg: usize ->
      v_Self ->
      v_TypeArg ->
      t_Type v_TypeArg v_ConstArg
    -> Type0;
  f_associated_function_post:
      #v_MethodTypeArg: Type0 ->
      v_MethodConstArg: usize ->
      v_Self ->
      v_TypeArg ->
      t_Type v_TypeArg v_ConstArg ->
      Prims.unit
    -> Type0;
  f_associated_function:
      #v_MethodTypeArg: Type0 ->
      v_MethodConstArg: usize ->
      x0: v_Self ->
      x1: v_TypeArg ->
      x2: t_Type v_TypeArg v_ConstArg
    -> Prims.Pure Prims.unit
        (f_associated_function_pre #v_MethodTypeArg v_MethodConstArg x0 x1 x2)
        (fun result -> f_associated_function_post #v_MethodTypeArg v_MethodConstArg x0 x1 x2 result)
}

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl (#v_TypeArg: Type0) (v_ConstArg: usize) : t_Trait Prims.unit v_TypeArg v_ConstArg =
  {
    f_method_pre
    =
    (fun
        (#v_MethodTypeArg: Type0)
        (v_MethodConstArg: usize)
        (self: Prims.unit)
        (value_TypeArg: v_TypeArg)
        (value_Type: t_Type v_TypeArg v_ConstArg)
        ->
        true);
    f_method_post
    =
    (fun
        (#v_MethodTypeArg: Type0)
        (v_MethodConstArg: usize)
        (self: Prims.unit)
        (value_TypeArg: v_TypeArg)
        (value_Type: t_Type v_TypeArg v_ConstArg)
        (out: Prims.unit)
        ->
        true);
    f_method
    =
    (fun
        (#v_MethodTypeArg: Type0)
        (v_MethodConstArg: usize)
        (self: Prims.unit)
        (value_TypeArg: v_TypeArg)
        (value_Type: t_Type v_TypeArg v_ConstArg)
        ->
        ());
    f_associated_function_pre
    =
    (fun
        (#v_MethodTypeArg: Type0)
        (v_MethodConstArg: usize)
        (e_self: Prims.unit)
        (value_TypeArg: v_TypeArg)
        (value_Type: t_Type v_TypeArg v_ConstArg)
        ->
        true);
    f_associated_function_post
    =
    (fun
        (#v_MethodTypeArg: Type0)
        (v_MethodConstArg: usize)
        (e_self: Prims.unit)
        (value_TypeArg: v_TypeArg)
        (value_Type: t_Type v_TypeArg v_ConstArg)
        (out: Prims.unit)
        ->
        true);
    f_associated_function
    =
    fun
      (#v_MethodTypeArg: Type0)
      (v_MethodConstArg: usize)
      (e_self: Prims.unit)
      (value_TypeArg: v_TypeArg)
      (value_Type: t_Type v_TypeArg v_ConstArg)
      ->
      ()
  }

let method_caller
      (#v_MethodTypeArg #v_TypeArg: Type0)
      (v_ConstArg v_MethodConstArg: usize)
      (#v_ImplTrait: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i3: t_Trait v_ImplTrait v_TypeArg v_ConstArg)
      (x: v_ImplTrait)
      (value_TypeArg: v_TypeArg)
      (value_Type: t_Type v_TypeArg v_ConstArg)
    : Prims.unit =
  let _:Prims.unit =
    f_method #v_ImplTrait
      #v_TypeArg
      #v_ConstArg
      #FStar.Tactics.Typeclasses.solve
      #v_MethodTypeArg
      v_MethodConstArg
      x
      value_TypeArg
      value_Type
  in
  ()

let associated_function_caller
      (#v_MethodTypeArg #v_TypeArg: Type0)
      (v_ConstArg v_MethodConstArg: usize)
      (#v_ImplTrait: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i3: t_Trait v_ImplTrait v_TypeArg v_ConstArg)
      (x: v_ImplTrait)
      (value_TypeArg: v_TypeArg)
      (value_Type: t_Type v_TypeArg v_ConstArg)
    : Prims.unit =
  let _:Prims.unit =
    f_associated_function #v_ImplTrait
      #v_TypeArg
      #v_ConstArg
      #FStar.Tactics.Typeclasses.solve
      #v_MethodTypeArg
      v_MethodConstArg
      x
      value_TypeArg
      value_Type
  in
  ()

class t_SubTrait (v_Self: Type0) (v_TypeArg: Type0) (v_ConstArg: usize) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_15145771689388873921:t_Trait v_Self
    v_TypeArg
    v_ConstArg;
  f_AssocType:Type0;
  f_AssocType_2317355564376578742:t_Trait f_AssocType v_TypeArg v_ConstArg
}
'''
"Traits.Interlaced_consts_types.fst" = '''
module Traits.Interlaced_consts_types
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_Bar (v_FooConst: usize) (v_FooType: Type0) =
  | Bar : t_Array v_FooType v_FooConst -> t_Bar v_FooConst v_FooType

class t_Foo (v_Self: Type0) (v_FooConst: usize) (v_FooType: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_fun_pre:
      v_FunConst: usize ->
      #v_FunType: Type0 ->
      t_Array v_FooType v_FooConst ->
      t_Array v_FunType v_FunConst
    -> Type0;
  f_fun_post:
      v_FunConst: usize ->
      #v_FunType: Type0 ->
      t_Array v_FooType v_FooConst ->
      t_Array v_FunType v_FunConst ->
      Prims.unit
    -> Type0;
  f_fun:
      v_FunConst: usize ->
      #v_FunType: Type0 ->
      x0: t_Array v_FooType v_FooConst ->
      x1: t_Array v_FunType v_FunConst
    -> Prims.Pure Prims.unit
        (f_fun_pre v_FunConst #v_FunType x0 x1)
        (fun result -> f_fun_post v_FunConst #v_FunType x0 x1 result)
}

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl (v_FooConst: usize) (#v_FooType #v_SelfType: Type0) : t_Foo v_SelfType v_FooConst v_FooType =
  {
    f_fun_pre
    =
    (fun
        (v_FunConst: usize)
        (#v_FunType: Type0)
        (x: t_Array v_FooType v_FooConst)
        (y: t_Array v_FunType v_FunConst)
        ->
        true);
    f_fun_post
    =
    (fun
        (v_FunConst: usize)
        (#v_FunType: Type0)
        (x: t_Array v_FooType v_FooConst)
        (y: t_Array v_FunType v_FunConst)
        (out: Prims.unit)
        ->
        true);
    f_fun
    =
    fun
      (v_FunConst: usize)
      (#v_FunType: Type0)
      (x: t_Array v_FooType v_FooConst)
      (y: t_Array v_FunType v_FunConst)
      ->
      ()
  }
'''
"Traits.Recursive_trait_with_assoc_type.fst" = '''
module Traits.Recursive_trait_with_assoc_type
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_Trait1 (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_T:Type0;
  f_T_7969211799618487585:t_Trait1 f_T
}

class t_Trait2 (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_3259985701465885527:t_Trait1 v_Self;
  f_U:Type0
}
'''
"Traits.Type_alias_bounds_issue_707_.fst" = '''
module Traits.Type_alias_bounds_issue_707_
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_StructWithGenericBounds (v_T: Type0) {| i1: Core.Clone.t_Clone v_T |} =
  | StructWithGenericBounds : v_T -> t_StructWithGenericBounds v_T
'''
"Traits.Unconstrainted_types_issue_677_.fst" = '''
module Traits.Unconstrainted_types_issue_677_
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_PolyOp (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_op_pre:u32 -> u32 -> Type0;
  f_op_post:u32 -> u32 -> u32 -> Type0;
  f_op:x0: u32 -> x1: u32 -> Prims.Pure u32 (f_op_pre x0 x1) (fun result -> f_op_post x0 x1 result)
}

type t_Plus = | Plus : t_Plus

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: t_PolyOp t_Plus =
  {
    f_op_pre = (fun (x: u32) (y: u32) -> true);
    f_op_post = (fun (x: u32) (y: u32) (out: u32) -> true);
    f_op = fun (x: u32) (y: u32) -> x +! y
  }

type t_Times = | Times : t_Times

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_PolyOp_for_Times: t_PolyOp t_Times =
  {
    f_op_pre = (fun (x: u32) (y: u32) -> true);
    f_op_post = (fun (x: u32) (y: u32) (out: u32) -> true);
    f_op = fun (x: u32) (y: u32) -> x *! y
  }

let twice (#v_OP: Type0) (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_PolyOp v_OP) (x: u32)
    : u32 = f_op #v_OP #FStar.Tactics.Typeclasses.solve x x

let both (x: u32) : (u32 & u32) = twice #t_Plus x, twice #t_Times x <: (u32 & u32)
'''
"Traits.fst" = '''
module Traits
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

class t_SuperTrait (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_15837849249852401974:Core.Clone.t_Clone v_Self;
  f_function_of_super_trait_pre:v_Self -> Type0;
  f_function_of_super_trait_post:v_Self -> u32 -> Type0;
  f_function_of_super_trait:x0: v_Self
    -> Prims.Pure u32
        (f_function_of_super_trait_pre x0)
        (fun result -> f_function_of_super_trait_post x0 result)
}

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: t_SuperTrait i32 =
  {
    _super_15837849249852401974 = FStar.Tactics.Typeclasses.solve;
    f_function_of_super_trait_pre = (fun (self: i32) -> true);
    f_function_of_super_trait_post = (fun (self: i32) (out: u32) -> true);
    f_function_of_super_trait = fun (self: i32) -> cast (Core.Num.impl_i32__abs self <: i32) <: u32
  }

type t_Struct = | Struct : t_Struct

class t_Bar (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_bar_pre:v_Self -> Type0;
  f_bar_post:v_Self -> Prims.unit -> Type0;
  f_bar:x0: v_Self -> Prims.Pure Prims.unit (f_bar_pre x0) (fun result -> f_bar_post x0 result)
}

let impl_2__method (#v_T: Type0) (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_Bar v_T) (x: v_T)
    : Prims.unit = f_bar #v_T #FStar.Tactics.Typeclasses.solve x

let cclosure_iimpl_expr
      (#v_I: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: Core.Iter.Traits.Iterator.t_Iterator v_I)
      (it: v_I)
    : Alloc.Vec.t_Vec Prims.unit Alloc.Alloc.t_Global =
  Core.Iter.Traits.Iterator.f_collect #(Core.Iter.Adapters.Map.t_Map v_I (Prims.unit -> Prims.unit))
    #FStar.Tactics.Typeclasses.solve
    #(Alloc.Vec.t_Vec Prims.unit Alloc.Alloc.t_Global)
    (Core.Iter.Traits.Iterator.f_map #v_I
        #FStar.Tactics.Typeclasses.solve
        #Prims.unit
        it
        (fun x -> x)
      <:
      Core.Iter.Adapters.Map.t_Map v_I (Prims.unit -> Prims.unit))

let cclosure_iimpl_expr_fngen
      (#v_I #v_F: Type0)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i2: Core.Iter.Traits.Iterator.t_Iterator v_I)
      (#[FStar.Tactics.Typeclasses.tcresolve ()] i3: Core.Ops.Function.t_FnMut v_F Prims.unit)
      (it: v_I)
      (f: v_F)
    : Alloc.Vec.t_Vec Prims.unit Alloc.Alloc.t_Global =
  Core.Iter.Traits.Iterator.f_collect #(Core.Iter.Adapters.Map.t_Map v_I v_F)
    #FStar.Tactics.Typeclasses.solve
    #(Alloc.Vec.t_Vec Prims.unit Alloc.Alloc.t_Global)
    (Core.Iter.Traits.Iterator.f_map #v_I #FStar.Tactics.Typeclasses.solve #Prims.unit #v_F it f
      <:
      Core.Iter.Adapters.Map.t_Map v_I v_F)

type t_Error = | Error_Fail : t_Error

let t_Error_cast_to_repr (x: t_Error) : isize = match x <: t_Error with | Error_Fail  -> mk_isize 0

let impl_Error__for_application_callback (_: Prims.unit) :  Prims.unit -> t_Error =
  fun temp_0_ ->
    let _:Prims.unit = temp_0_ in
    Error_Fail <: t_Error

let iter_option (#v_T: Type0) (x: Core.Option.t_Option v_T) : Core.Option.t_IntoIter v_T =
  Core.Iter.Traits.Collect.f_into_iter #(Core.Option.t_Option v_T)
    #FStar.Tactics.Typeclasses.solve
    (Core.Option.impl__as_ref #v_T x <: Core.Option.t_Option v_T)

let uuse_iimpl_trait (_: Prims.unit) : Prims.unit =
  let iter:Core.Option.t_IntoIter bool =
    iter_option #bool (Core.Option.Option_Some false <: Core.Option.t_Option bool)
  in
  let tmp0, out:(Core.Option.t_IntoIter bool & Core.Option.t_Option bool) =
    Core.Iter.Traits.Iterator.f_next #(Core.Option.t_IntoIter bool)
      #FStar.Tactics.Typeclasses.solve
      iter
  in
  let iter:Core.Option.t_IntoIter bool = tmp0 in
  let _:Core.Option.t_Option bool = out in
  ()

class t_Foo (v_Self: Type0) = {
  [@@@ FStar.Tactics.Typeclasses.no_method]_super_4726684624731801277:Core.Marker.t_MetaSized v_Self;
  f_AssocType:Type0;
  f_AssocType_1162045947544099865:t_SuperTrait f_AssocType;
  f_N:usize;
  f_assoc_f_pre:Prims.unit -> Type0;
  f_assoc_f_post:Prims.unit -> Prims.unit -> Type0;
  f_assoc_f:x0: Prims.unit
    -> Prims.Pure Prims.unit (f_assoc_f_pre x0) (fun result -> f_assoc_f_post x0 result);
  f_method_f_pre:v_Self -> Type0;
  f_method_f_post:v_Self -> Prims.unit -> Type0;
  f_method_f:x0: v_Self
    -> Prims.Pure Prims.unit (f_method_f_pre x0) (fun result -> f_method_f_post x0 result);
  f_assoc_type_pre:
      {| i2: Core.Marker.t_Copy v_5081411602995720689.f_AssocType |} ->
      v_5081411602995720689.f_AssocType
    -> Type0;
  f_assoc_type_post:
      {| i2: Core.Marker.t_Copy v_5081411602995720689.f_AssocType |} ->
      v_5081411602995720689.f_AssocType ->
      Prims.unit
    -> Type0;
  f_assoc_type:
      {| i2: Core.Marker.t_Copy v_5081411602995720689.f_AssocType |} ->
      x0: v_5081411602995720689.f_AssocType
    -> Prims.Pure Prims.unit
        (f_assoc_type_pre #i2 x0)
        (fun result -> f_assoc_type_post #i2 x0 result)
}

class t_Lang (v_Self: Type0) = {
  f_Var:Type0;
  f_s_pre:v_Self -> i32 -> Type0;
  f_s_post:v_Self -> i32 -> (v_Self & v_178762381425797165.f_Var) -> Type0;
  f_s:x0: v_Self -> x1: i32
    -> Prims.Pure (v_Self & v_178762381425797165.f_Var)
        (f_s_pre x0 x1)
        (fun result -> f_s_post x0 x1 result)
}

let f (#v_T: Type0) (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_Foo v_T) (x: v_T) : Prims.unit =
  let _:Prims.unit = f_assoc_f #v_T #FStar.Tactics.Typeclasses.solve () in
  f_method_f #v_T #FStar.Tactics.Typeclasses.solve x

let g (#v_T: Type0) (#[FStar.Tactics.Typeclasses.tcresolve ()] i1: t_Foo v_T) (x: i1.f_AssocType)
    : u32 = f_function_of_super_trait #i1.f_AssocType #FStar.Tactics.Typeclasses.solve x

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl_Foo_for_tuple_: t_Foo Prims.unit =
  {
    f_AssocType = i32;
    f_AssocType_1162045947544099865 = FStar.Tactics.Typeclasses.solve;
    f_N = mk_usize 32;
    f_assoc_f_pre = (fun (_: Prims.unit) -> true);
    f_assoc_f_post = (fun (_: Prims.unit) (out: Prims.unit) -> true);
    f_assoc_f = (fun (_: Prims.unit) -> () <: Prims.unit);
    f_method_f_pre = (fun (self: Prims.unit) -> true);
    f_method_f_post = (fun (self: Prims.unit) (out: Prims.unit) -> true);
    f_method_f
    =
    (fun (self: Prims.unit) -> f_assoc_f #Prims.unit #FStar.Tactics.Typeclasses.solve ());
    f_assoc_type_pre = (fun (_: i32) -> true);
    f_assoc_type_post = (fun (_: i32) (out: Prims.unit) -> true);
    f_assoc_type = fun (_: i32) -> ()
  }
'''
