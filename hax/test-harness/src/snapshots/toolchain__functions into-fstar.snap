---
source: test-harness/src/harness.rs
expression: snapshot
info:
  kind:
    Translate:
      backend: fstar
  info:
    name: functions
    manifest: functions/Cargo.toml
    description: ~
  spec:
    optional: false
    broken: false
    issue_id: ~
    positive: true
    snapshot:
      stderr: false
      stdout: true
    include_flag: ~
    backend_options: ~
---
exit = 0

[stdout]
diagnostics = []

[stdout.files]
"Functions.Issue_1048_.fst" = '''
module Functions.Issue_1048_
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

type t_CallableViaDeref = | CallableViaDeref : t_CallableViaDeref

[@@ FStar.Tactics.Typeclasses.tcinstance]
let impl: Core.Ops.Deref.t_Deref t_CallableViaDeref =
  {
    f_Target = Prims.unit -> bool;
    f_Target_4695674276362814091 = FStar.Tactics.Typeclasses.solve;
    f_deref_pre = (fun (self: t_CallableViaDeref) -> true);
    f_deref_post = (fun (self: t_CallableViaDeref) (out: (Prims.unit -> bool)) -> true);
    f_deref
    =
    fun (self: t_CallableViaDeref) ->
      fun temp_0_ ->
        let _:Prims.unit = temp_0_ in
        true
  }

let call_via_deref (_: Prims.unit) : bool =
  Core.Ops.Deref.f_deref #t_CallableViaDeref
    #FStar.Tactics.Typeclasses.solve
    (CallableViaDeref <: t_CallableViaDeref)
    ()
'''
"Functions.fst" = '''
module Functions
#set-options "--fuel 0 --ifuel 1 --z3rlimit 15"
open Core
open FStar.Mul

let calling_function_pointer__f (#v_T: Type0) (_: Prims.unit) : Prims.unit = ()

/// Issue #757
let calling_function_pointer (_: Prims.unit) : Prims.unit =
  let ff_ptr: Prims.unit -> Prims.unit = calling_function_pointer__f in
  let _:Prims.unit = calling_function_pointer__f #i32 () in
  ()
'''
